{"version":3,"file":"static/js/775.a576ca3a.chunk.js","mappings":"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","sources":["pages/reactionsList/listReactions/dataListReactions.tsx","pages/reactionsList/tableReactions/TableReactions.tsx","pages/reactionsList/listReactions/utilsListReactions.tsx","pages/reactionsList/tableBody/TableBody.tsx","pages/reactionsList/tableHead/TableHead.tsx","pages/reactionsList/listReactions/ListReactions.tsx"],"sourcesContent":["export const tableHeadFirs = [\r\n  \"Nazwa\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Milimole\",\r\n  \"Substrakt\",\r\n  \"Warunki\",\r\n  \"Rozpuszczalniki\",\r\n];\r\n\r\nexport const tableHeadSecond = [\r\n  \"Data rozpoczęscia\",\r\n  \"Data zakończenia\",\r\n  \"Gdzina rozpoczęcia\",\r\n  \"Godzina zakończenia\",\r\n];\r\n","import { FC } from \"react\";\r\n\r\nimport { ModelTableReactions } from \"./modelTableReactions\";\r\n\r\nconst TableReactions: FC<ModelTableReactions> = ({ children }) => {\r\n  return <table style={{ fontSize: 10 }}>{children}</table>;\r\n};\r\n\r\nexport default TableReactions;\r\n","import { ModelReaction } from \"./modelReaction\";\r\n\r\nexport const getTableBodyReactionsFirst = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction).slice(0, 8);\r\n  reactionValues.shift();\r\n  return reactionValues;\r\n};\r\n\r\nexport const getTableBodyReactionsSecond = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction);\r\n  const reactionValuesFiltered = [reactionValues[0], ...reactionValues.slice(8, 13)];\r\n  reactionValuesFiltered.shift();\r\n  return reactionValuesFiltered;\r\n};\r\n","import React, { FC, useState } from \"react\";\r\n// import { ModelTableReactions } from \"../tableReactions/modelTableReactions\";\r\nimport {\r\n  useDeleteReactionMutation,\r\n  useGetReactionsQuery,\r\n} from \"../../../services/apiSlice\";\r\nimport { ModelReaction } from \"../listReactions/modelReaction\";\r\nimport { ModelTableBody } from \"./ModelTableBody\";\r\n\r\n\r\nconst TableBody: FC<ModelTableBody> = ({\r\n  getTableBodyReactions,\r\n  reactions,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const { data, error, isLoading, refetch } = useGetReactionsQuery(undefined);\r\n  const [deleteReaction] = useDeleteReactionMutation();\r\n  const handleDelete = async (id?: string) => {\r\n    await deleteReaction(id);\r\n  };\r\n\r\n  if (isLoading) return <div>Loading...</div>;\r\n\r\n  if (error) return <div>{`Error: ${error}`}</div>;\r\n\r\n  return (\r\n    <tbody>\r\n      {reactions?.map(reaction => {\r\n        return (\r\n          <tr>\r\n            {getTableBodyReactions(reaction).map(item => {\r\n              return (\r\n                <td key={crypto.randomUUID()}>\r\n                  {Array.isArray(item) ? item.flat().join(\", \") : item}\r\n                </td>\r\n              );\r\n            })}\r\n            {isOpen ? (\r\n              <td>\r\n                <button>Edytuj</button>\r\n              </td>\r\n            ) : (\r\n              <td>\r\n                <button>Zatwierdź</button>\r\n              </td>\r\n            )}\r\n\r\n            <td>\r\n              <button onClick={() => handleDelete(reaction.id)}>Usuń</button>\r\n            </td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import React, { FC } from \"react\";\r\nimport { ModelTableHead } from \"./ModelTableHead\";\r\n\r\nconst TableHead: FC<ModelTableHead> = ({ tableHead }) => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {tableHead.map(reaction => {\r\n          return (\r\n            <td key={reaction} style={{ fontWeight: 900 }}>\r\n              {reaction}\r\n            </td>\r\n          );\r\n        })}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import { useState } from \"react\";\r\nimport { tableHeadFirs, tableHeadSecond } from \"./dataListReactions\";\r\nimport TableReactions from \"../tableReactions/TableReactions\";\r\nimport {\r\n  getTableBodyReactionsFirst,\r\n  getTableBodyReactionsSecond,\r\n} from \"./utilsListReactions\";\r\nimport TableBody from \"../tableBody/TableBody\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport { useGetReactionsQuery } from \"../../../services/apiSlice\";\r\nimport { ModelReaction } from \"./modelReaction\";\r\n\r\nconst ListReactions = () => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const { data, error, isLoading, refetch } = useGetReactionsQuery(undefined);\r\n\r\n  const reactions: ModelReaction[] | undefined = data\r\n    ? Object.keys(data).map(key => ({\r\n        id: key,\r\n        name: data[key].name,\r\n        technics: data[key].technics,\r\n        alcaloids: data[key].alcaloids,\r\n        selectMilimolles: data[key].selectMilimolles,\r\n        substract: data[key].substract,\r\n        selectReactionCondition: data[key].selectReactionCondition,\r\n        solvents: data[key].solvents,\r\n        startDate: data[key].startDate,\r\n        finishDate: data[key].finishDate,\r\n        startTime: data[key].startTime,\r\n        finishTime: data[key].finishTime,\r\n      }))\r\n    : [];\r\n\r\n  const handleOpen = (isOpen: boolean) => {\r\n    setIsOpen(isOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ fontSize: 10, marginTop: 200 }}>\r\n        <div onClick={() => handleOpen(true)}>Podsawowe dane</div>\r\n        <div onClick={() => handleOpen(false)}>Czas</div>\r\n      </div>\r\n\r\n      {isOpen ? (\r\n        <TableReactions>\r\n          <TableHead tableHead={tableHeadFirs} />\r\n          <TableBody\r\n            getTableBodyReactions={getTableBodyReactionsFirst}\r\n            reactions={reactions}\r\n          />\r\n        </TableReactions>\r\n      ) : (\r\n        <TableReactions>\r\n          <TableHead tableHead={tableHeadSecond} />\r\n          <TableBody\r\n            getTableBodyReactions={getTableBodyReactionsSecond}\r\n            reactions={reactions}\r\n          />\r\n        </TableReactions>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListReactions;\r\n"],"names":["tableHeadFirs","tableHeadSecond","_ref","children","_jsx","style","fontSize","getTableBodyReactionsFirst","reaction","reactionValues","Object","values","slice","shift","getTableBodyReactionsSecond","reactionValuesFiltered","concat","_toConsumableArray","getTableBodyReactions","reactions","_useState","useState","_useState2","_slicedToArray","isOpen","_useGetReactionsQuery","useGetReactionsQuery","undefined","error","data","isLoading","_useDeleteReactionMut","refetch","useDeleteReactionMutation","deleteReaction","handleDelete","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","stop","_x","apply","arguments","map","_jsxs","item","Array","isArray","flat","join","crypto","randomUUID","onClick","tableHead","fontWeight","setIsOpen","keys","key","name","technics","alcaloids","selectMilimolles","substract","selectReactionCondition","solvents","startDate","finishDate","startTime","finishTime","handleOpen","_Fragment","marginTop","TableReactions","TableHead","TableBody"],"sourceRoot":""}