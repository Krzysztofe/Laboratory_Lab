{"version":3,"file":"static/js/518.a681f15d.chunk.js","mappings":"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","sources":["hooks/useValidationForm.tsx","pages/tableReactions/requestMesageTableBody/TableBodyRequestMessage.tsx","pages/tableReactions/tableBtns/TableBtns.tsx","pages/tableReactions/tableCellsReaction/utilsTableCellsReaction.tsx","pages/tableReactions/tableCellsReaction/TableCellsReaction.tsx","pages/tableReactions/tableEditForm/dataTableEditForm.tsx","pages/tableReactions/tableEditForm/TableEditForm.tsx","pages/tableReactions/tableBody/TableBody.tsx","pages/tableReactions/tableHead/dataTableHead.tsx","pages/tableReactions/tableHead/TableHead.tsx","pages/tableReactions/tableHeader/TableHeader.tsx","pages/tableReactions/tableReactions/TableReactions.tsx","pages/tableReactions/_indexTableReactions/IndexTable.tsx"],"sourcesContent":["import { ModelReaction } from \"../services/apiSlice\";\r\n\r\nexport interface ModelValidationErrors {\r\n  [key: string]: any;\r\n  name?: string;\r\n  technics?: string;\r\n  alcaloids?: string;\r\n  selectMilimolles?: string;\r\n  substract?: string;\r\n  solvents?: string;\r\n  selectReactionCondition?: string;\r\n  startDate?: string;\r\n  finishDate?: string;\r\n  startTime?: string;\r\n  finishTime?: string;\r\n}\r\n\r\nconst toString = (solventsValue: string[] | string) => {\r\n  return Array.isArray(solventsValue)\r\n    ? solventsValue.join(\", \")\r\n    : solventsValue;\r\n};\r\n\r\nexport const useValidationForm = (\r\n  editedReaction: ModelReaction,\r\n  idx?: number\r\n) => {\r\n\r\n  const conditions = [\r\n    [\r\n      {\r\n        condition: editedReaction?.name.trim().length < 6,\r\n        errorMessage: \"Min. 6 znaków\",\r\n        key: \"name\",\r\n      },\r\n      {\r\n        condition: editedReaction?.name.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"name\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          isNaN(+editedReaction.selectMilimolles) ||\r\n          +editedReaction.selectMilimolles < 1 ||\r\n          +editedReaction.selectMilimolles > 6,\r\n        errorMessage: \"Podaj liczbę: 1-6\",\r\n        key: \"selectMilimolles\",\r\n      },\r\n      {\r\n        condition:\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"GRAMINA\" &&\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"KOFEINA\" &&\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"NIKOTYNA\",\r\n        errorMessage: \"Podaj alkaloid\",\r\n        key: \"alcaloids\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.technics.trim().length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"technics\",\r\n      },\r\n      {\r\n        condition: editedReaction.technics.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"technics\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition:\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"CH3OH\") &&\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"DMSO\") &&\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"DMF\") &&\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"CHCL3\") &&\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"C2H5OH\"),\r\n        errorMessage: \"Rozp. z listy\",\r\n        key: \"solvents\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIESZANIE\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"OGRZEWANIE\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIKROFALA\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"CHŁODZENIE\",\r\n        errorMessage: \"Podaj warunki\",\r\n        key: \"selectReactionCondition\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.substract.trim().length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"substract\",\r\n      },\r\n      {\r\n        condition: editedReaction.substract.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"substract\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.startDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition:\r\n          new Date(editedReaction.startDate) >\r\n          new Date(editedReaction.finishDate),\r\n        errorMessage: \"Data po rozpoczęciu\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.startTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startTime\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishTime\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const validationForm = () => {\r\n    let _errors: ModelValidationErrors = {};\r\n\r\n    const conditionSet =\r\n      idx === undefined ? conditions.flat() : conditions[idx];\r\n\r\n    conditionSet.forEach(({ condition, errorMessage, key }) => {\r\n      if (condition) {\r\n        _errors[key] = errorMessage;\r\n      }\r\n    });\r\n\r\n    return _errors;\r\n  };\r\n\r\n  return { validationForm };\r\n};\r\n","export interface Props {\r\n  message: string;\r\n}\r\n\r\nconst TableBodyRequestMessage = (props:Props) => {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td style={{ margin: \"0px auto\", width:\"fit-content\"}}>{props.message}</td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBodyRequestMessage;\r\n","import { useEffect } from \"react\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { MdSystemUpdateAlt } from \"react-icons/md\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  handleCleanEditForm,\r\n  handleEdit,\r\n  handleRequestStateId,\r\n  handleHttpRequest,\r\n  handleUpdate,\r\n} from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport {\r\n  ModelReaction,\r\n  useDeleteReactionMutation,\r\n  useUpdateReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\n\r\nconst TableBtns = (props: Partial<ModelReaction>) => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction, printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const [updateReaction, success] = useUpdateReactionMutation();\r\n  const [deleteReaction, isLoading] = useDeleteReactionMutation();\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      handleHttpRequest([\r\n        success.isLoading,\r\n        success.isError,\r\n        isLoading.isLoading,\r\n        isLoading.isError,\r\n      ])\r\n    );\r\n  }, [\r\n    success.isLoading,\r\n    success.isError,\r\n    isLoading.isLoading,\r\n    isLoading.isError,\r\n    dispatch,\r\n  ]);\r\n\r\n  const handleEditReaction = (\r\n    printReactions: ModelReaction[],\r\n    reactionID: string\r\n  ) => {\r\n    dispatch(handleEdit([printReactions, reactionID]));\r\n    dispatch(handleRequestStateId(reactionID));\r\n  };\r\n\r\n  const handleUpdateReaction = async (\r\n    printReactions: ModelReaction[],\r\n    reactionID: string\r\n  ) => {\r\n    if (Object.keys(validationForm()).length) return;\r\n    const updatedEditedReaction = { ...editedReaction, isEdit: true };\r\n    dispatch(handleUpdate([printReactions, reactionID]));\r\n    dispatch(handleCleanEditForm());\r\n    await updateReaction(updatedEditedReaction);\r\n  };\r\n\r\n  const handleDeleteReaction = async (id: string) => {\r\n    dispatch(handleRequestStateId(id));\r\n    dispatch(handleCleanEditForm());\r\n    const result = window.confirm(\"Chcesz usunąć zapis?\");\r\n    if (result) {\r\n      await deleteReaction(id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <td>\r\n      {props.reaction.isEdit ? (\r\n        <button\r\n          onClick={() => handleEditReaction(printReactions, props.reaction.id)}\r\n          className=\"tableReactions__btn tableReactions__btn--edit\"\r\n        >\r\n          <AiFillEdit />\r\n        </button>\r\n      ) : (\r\n        <button\r\n          onClick={() =>\r\n            handleUpdateReaction(printReactions, props.reaction.id)\r\n          }\r\n          className=\"tableReactions__btn tableReactions__btn--edit\"\r\n        >\r\n          <MdSystemUpdateAlt />\r\n        </button>\r\n      )}\r\n\r\n      <button\r\n        onClick={() => handleDeleteReaction(props.reaction.id)}\r\n        className=\"tableReactions__btn tableReactions__btn--trash\"\r\n      >\r\n        <FaTrashAlt />\r\n      </button>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default TableBtns;\r\n","\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nexport const getTableBodyReactionsFirst = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction).slice(0, 8);\r\n  reactionValues.shift();\r\n  return reactionValues;\r\n};\r\n\r\nexport const getTableBodyReactionsSecond = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction);\r\n  const reactionValuesFiltered = [\r\n    reactionValues[0],\r\n    ...reactionValues.slice(8, 12),\r\n  ];\r\n  reactionValuesFiltered.shift();\r\n  return reactionValuesFiltered;\r\n};\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  ModelReaction\r\n} from \"../../../services/apiSlice\";\r\nimport {\r\n  getTableBodyReactionsFirst,\r\n  getTableBodyReactionsSecond,\r\n} from \"./utilsTableCellsReaction\";\r\n\r\nconst TableCellsReaction = (props: Partial<ModelReaction>) => {\r\n \r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n\r\n  const toString = (solventsValue: string) => {\r\n    if (Array.isArray(solventsValue)) {\r\n      return solventsValue.join(\", \");\r\n    }\r\n    return solventsValue;\r\n  };\r\n\r\n  const getReactions = isOpen\r\n    ? getTableBodyReactionsFirst\r\n    : getTableBodyReactionsSecond;\r\n\r\n\r\n  return (\r\n    <>\r\n      {getReactions(props.reaction).map((reaction, idx) => {\r\n        return (\r\n          <td\r\n            key={crypto.randomUUID()}\r\n          >\r\n            {idx === 6\r\n              ? toString(reaction)\r\n                  .split(\"\")\r\n                  .map((char: string) => {\r\n                    return isNaN(Number(char)) ? (\r\n                      char\r\n                    ) : (\r\n                      <small\r\n                        className=\"numberInCheckbox\"\r\n                        key={crypto.randomUUID()}\r\n                      >\r\n                        {char}\r\n                      </small>\r\n                    );\r\n                  })\r\n              : reaction}\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableCellsReaction;\r\n","export const inputsPrintDataFirst = [\r\n  { name: \"name\", type: \"text\" },\r\n  { name: \"technics\", type: \"text\" },\r\n  { name: \"alcaloids\", type: \"text\" },\r\n  { name: \"selectMilimolles\", type: \"text\" },\r\n  { name: \"substract\", type: \"text\" },\r\n  { name: \"selectReactionCondition\", type: \"text\" },\r\n  { name: \"solvents\", type: \"text\" },\r\n];\r\n\r\nexport const inputsPrintDataSecond = [\r\n  { name: \"startDate\", type: \"date\" },\r\n  { name: \"finishDate\", type: \"date\" },\r\n  { name: \"startTime\", type: \"time\" },\r\n  { name: \"finishTime\", type: \"time\" },\r\n];\r\n","import TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleChange } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  inputsPrintDataFirst,\r\n  inputsPrintDataSecond,\r\n} from \"./dataTableEditForm\";\r\n\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport {\r\n  useAddReactionMutation,\r\n  useReactionsQuery,\r\n} from \"../../../services/apiSlice\";\r\n\r\nconst TableEditForm = () => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n  const [addReaction, success] = useAddReactionMutation();\r\n\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  const handleInputChange = (e: ChangeEvent) => {\r\n    const { name, value } = e.target;\r\n    dispatch(handleChange([name, value]));\r\n  };\r\n\r\n  const inputsPrintData = isOpen ? inputsPrintDataFirst : inputsPrintDataSecond;\r\n\r\n \r\n  \r\n\r\n  return (\r\n    <>\r\n      {inputsPrintData.map(({ type, name }) => {\r\n        return (\r\n          <td style={{ position: \"relative\" }} key={name}>\r\n            <TextInput\r\n              label={\"\"}\r\n              type={type}\r\n              name={name}\r\n              value={editedReaction[name]}\r\n              handleChange={handleInputChange}\r\n              containerClass={`editForm__textInputContainer ${\r\n                success.error && \"editError\"\r\n              }`}\r\n              labelClass={\"editForm__textInputLabel\"}\r\n              inputClass={`editForm__textInput`}\r\n            />\r\n\r\n            <div className=\"editForm__error\">\r\n              <small>\r\n                {validationForm()[name as keyof typeof validationForm]}\r\n              </small>\r\n            </div>\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableEditForm;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { getReactions } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport TableBtns from \"../tableBtns/TableBtns\";\r\nimport TableCellsReaction from \"../tableCellsReaction/TableCellsReaction\";\r\nimport TableEditForm from \"../tableEditForm/TableEditForm\";\r\n\r\nconst TableBody = () => {\r\n  const dispatch = useDispatch();\r\n  const { data, error, isLoading } = useReactionsQuery(undefined);\r\n\r\n  const { printReactions, requestState } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getReactions(data));\r\n  }, [data, dispatch]);\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n\r\n  if (printReactions.length === 0) {\r\n    return <TableBodyRequestMessage message={\"Brak zapisanych reakcji\"} />;\r\n  }\r\n\r\n  const requestLoadingClass = (reactionID: any) => {\r\n    if (requestState.editIsLoading && requestState.id === reactionID) {\r\n      return \"httpLoadingInRow\";\r\n    }\r\n    if (requestState.editIsError && requestState.id === reactionID) {\r\n      return \"httpErrorInRow\";\r\n    }\r\n\r\n    if (requestState.deleteIsLoading && requestState.id === reactionID) {\r\n      return \"httpLoadingInRow\";\r\n    }\r\n    if (requestState.deleteIsError && requestState.id === reactionID) {\r\n      return \"httpErrorInRow\";\r\n    }\r\n\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <tbody>\r\n      {printReactions?.map((reaction, idx) => {\r\n        return (\r\n          <tr\r\n            className={requestLoadingClass(reaction?.id)}\r\n            key={reaction.id}\r\n          >\r\n            <td>{idx + 1}</td>\r\n            {reaction.isEdit ? (\r\n              <>\r\n                <TableCellsReaction reaction={reaction} />\r\n              </>\r\n            ) : (\r\n              <TableEditForm />\r\n            )}\r\n            <TableBtns reaction={reaction} />\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","export const tableHeadDataFirst = [\r\n  \"Nazwa\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Mole\",\r\n  \"Substrat\",\r\n  \"Warunki\",\r\n  \"Rozp.\",\r\n];\r\n\r\nexport const tableHeadDataSecond = [\r\n  \"Otwarcie\",\r\n  \"Zamknięcie\",\r\n  \"Początek\",\r\n  \"Koniec\",\r\n];\r\n\r\n\r\n<body>\r\n<main></main>\r\n<footer>uuuuu</footer>\r\n\r\n</body>","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { tableHeadDataFirst, tableHeadDataSecond } from \"./dataTableHead\";\r\n\r\nconst TableHead = () => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <td>nr</td>\r\n        {isOpen\r\n          ? tableHeadDataFirst.map(reaction => {\r\n              return <td key={reaction}>{reaction}</td>;\r\n            })\r\n          : tableHeadDataSecond.map(reaction => {\r\n              return <td key={crypto.randomUUID()}>{reaction}</td>;\r\n            })}\r\n        <td></td>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { handleTableOpen } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\n\r\nconst TableHeader = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { printReactions, editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  const conditionsPrint =\r\n    !editedReaction.isEdit &&\r\n    (validationForm().name ||\r\n      validationForm().technics ||\r\n      validationForm().alcaloids ||\r\n      validationForm().selectMilimolles ||\r\n      validationForm().substract ||\r\n      validationForm().selectReactionCondition ||\r\n      validationForm().solvents)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Parametry\" };\r\n\r\n  const timePrint =\r\n    !editedReaction.isEdit &&\r\n    (validationForm().startDate ||\r\n      validationForm().finishDate ||\r\n      validationForm().startTime ||\r\n      validationForm().finishTime)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Czasy\" };\r\n\r\n  return (\r\n    <section className=\"wrapper tableReactions__headers\">\r\n      <div\r\n        onClick={() => dispatch(handleTableOpen(true))}\r\n        style={{\r\n          color: conditionsPrint.color,\r\n          backgroundColor: `${\r\n            isOpen ? \"rgb(142,151,164)\" : \"rgb(255 255 255)\"\r\n          }`,\r\n        }}\r\n        className=\"tableReactions__header\"\r\n      >\r\n        {conditionsPrint.text}\r\n      </div>\r\n      <div\r\n        onClick={() => dispatch(handleTableOpen(false))}\r\n        style={{\r\n          color: timePrint.color,\r\n          backgroundColor: `${\r\n            isOpen ? \"rgb(255 255 255)\" : \"rgb(142,151,164)\"\r\n          }`,\r\n        }}\r\n        className=\"tableReactions__header\"\r\n      >\r\n        {timePrint.text}\r\n      </div>\r\n      <div className=\"tableReactions__header  tableReactions__header--counter \">\r\n        {printReactions.length > 0\r\n          ? `Liczba reakcji: ${printReactions.length}`\r\n          : \"\"}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TableHeader;\r\n","import { ReactNode } from \"react\";\r\n\r\nexport interface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nconst TableReactions = (props: Props) => {\r\n  return <table className=\"wrapper tableReactions__table\">{props.children}</table>;\r\n};\r\n\r\nexport default TableReactions;\r\n","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../../data/firebaseConfig\";\r\nimport TableBody from \"../tableBody/TableBody\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport TableHeader from \"../tableHeader/TableHeader\";\r\nimport TableReactions from \"../tableReactions/TableReactions\";\r\n\r\nconst IndexTable = () => {\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(user => {\r\n      !user && navigate(\"/\");\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <main className=\"tableReactions__main\">\r\n      <TableHeader />\r\n      <TableReactions>\r\n        <TableHead />\r\n        <TableBody />\r\n      </TableReactions>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexTable;\r\n"],"names":["toString","solventsValue","Array","isArray","join","useValidationForm","editedReaction","idx","conditions","condition","name","trim","length","errorMessage","key","isNaN","selectMilimolles","alcaloids","toUpperCase","technics","solvents","toLocaleUpperCase","includes","selectReactionCondition","substract","startDate","finishDate","Date","startTime","finishTime","validationForm","_errors","undefined","flat","forEach","_ref","props","_jsx","children","style","margin","width","message","dispatch","useDispatch","_useSelector","useSelector","state","tableReactions","printReactions","_useUpdateReactionMut","useUpdateReactionMutation","_useUpdateReactionMut2","_slicedToArray","updateReaction","success","_useDeleteReactionMut","useDeleteReactionMutation","_useDeleteReactionMut2","deleteReaction","isLoading","useEffect","handleHttpRequest","isError","handleUpdateReaction","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reactionID","updatedEditedReaction","wrap","_context","prev","next","Object","keys","abrupt","_objectSpread","isEdit","handleUpdate","handleCleanEditForm","stop","_x","_x2","apply","arguments","handleDeleteReaction","_ref2","_callee2","id","_context2","handleRequestStateId","window","confirm","_x3","_jsxs","reaction","onClick","handleEdit","handleEditReaction","className","AiFillEdit","MdSystemUpdateAlt","FaTrashAlt","getTableBodyReactionsFirst","reactionValues","values","slice","shift","getTableBodyReactionsSecond","reactionValuesFiltered","concat","_toConsumableArray","isOpen","toggleTable","getReactions","_Fragment","map","split","char","Number","crypto","randomUUID","inputsPrintDataFirst","type","inputsPrintDataSecond","_useAddReactionMutati","useAddReactionMutation","_useAddReactionMutati2","_useReactionsQuery","useReactionsQuery","error","handleInputChange","e","_e$target","target","value","handleChange","inputsPrintData","position","TextInput","label","containerClass","labelClass","inputClass","data","requestState","TableBodyRequestMessage","editIsLoading","editIsError","deleteIsLoading","deleteIsError","TableCellsReaction","TableEditForm","TableBtns","tableHeadDataFirst","tableHeadDataSecond","conditionsPrint","color","text","timePrint","handleTableOpen","backgroundColor","navigate","useNavigate","auth","user","TableHeader","TableReactions","TableHead","TableBody"],"sourceRoot":""}