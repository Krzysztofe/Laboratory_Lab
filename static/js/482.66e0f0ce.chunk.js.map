{"version":3,"file":"static/js/482.66e0f0ce.chunk.js","mappings":"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","sources":["pages/tableReactions/tableReactions/TableReactions.tsx","pages/tableReactions/tableEditForm/dataTableEditForm.tsx","pages/tableReactions/tableEditForm/TableEditForm.tsx","pages/tableReactions/tableReactionPrint/utilsTableReactionPrint.tsx","pages/tableReactions/requestMesageTableBody/TableBodyRequestMessage.tsx","pages/tableReactions/tableReactionPrint/TablePrintReaction.tsx","pages/tableReactions/tableBtns/TableBtns.tsx","pages/tableReactions/tableBody/TableBody.tsx","pages/tableReactions/tableHead/dataTableHead.tsx","pages/tableReactions/tableHead/TableHead.tsx","pages/tableReactions/_indexTableReactions/IndexTable.tsx"],"sourcesContent":["import { FC } from \"react\";\r\n\r\nimport { ModelTableReactions } from \"./modelTableReactions\";\r\n\r\nconst TableReactions: FC<ModelTableReactions> = ({ children }) => {\r\n  return <table style={{ fontSize: 10 }}>{children}</table>;\r\n};\r\n\r\nexport default TableReactions;\r\n","export const inputsPrintDataFirst = [\r\n  { name: \"name\", type: \"text\" },\r\n  { name: \"technics\", type: \"text\" },\r\n  { name: \"alcaloids\", type: \"text\" },\r\n  { name: \"selectMilimolles\", type: \"text\" },\r\n  { name: \"substract\", type: \"text\" },\r\n  { name: \"selectReactionCondition\", type: \"text\" },\r\n  { name: \"solvents\", type: \"text\" },\r\n];\r\n\r\nexport const inputsPrintDataSecond = [\r\n  { name: \"startDate\", type: \"date\" },\r\n  { name: \"finishDate\", type: \"date\" },\r\n  { name: \"startTime\", type: \"time\" },\r\n  { name: \"finishTime\", type: \"time\" },\r\n];\r\n","import TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleChange } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  inputsPrintDataFirst,\r\n  inputsPrintDataSecond,\r\n} from \"./dataTableEditForm\";\r\n\r\nconst TableEditForm = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const handleInputChange = (e: ChangeEvent) => {\r\n    const { name, value } = e.target;\r\n    dispatch(handleChange([name, value]));\r\n  };\r\n\r\n  const inputsPrintData = isOpen ? inputsPrintDataFirst : inputsPrintDataSecond;\r\n\r\n  return (\r\n    <>\r\n      {inputsPrintData.map(inputData => {\r\n        return (\r\n          <td key={inputData.name}>\r\n            <TextInput\r\n              text={\"\"}\r\n              type={inputData.type}\r\n              name={inputData.name}\r\n              value={editedReaction[inputData.name]}\r\n              onChange={handleInputChange}\r\n            />\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableEditForm;\r\n","\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nexport const getTableBodyReactionsFirst = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction).slice(0, 8);\r\n  reactionValues.shift();\r\n  return reactionValues;\r\n};\r\n\r\nexport const getTableBodyReactionsSecond = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction);\r\n  const reactionValuesFiltered = [\r\n    reactionValues[0],\r\n    ...reactionValues.slice(8, 13),\r\n  ];\r\n  reactionValuesFiltered.shift();\r\n  return reactionValuesFiltered;\r\n};\r\n","import { FC } from \"react\";\r\nimport { ModelTableBodyRequestMessage } from \"./ModelTableBodyRequestMessage\";\r\n\r\nconst TableBodyRequestMessage: FC<ModelTableBodyRequestMessage> = ({\r\n  message,\r\n}) => {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td>{message}</td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBodyRequestMessage;\r\n","import { FC } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  getTableBodyReactionsFirst,\r\n  getTableBodyReactionsSecond,\r\n} from \"./utilsTableReactionPrint\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nconst TablePrintReaction: FC<ModelReaction> = ({ reaction }) => {\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const getReactions = isOpen\r\n    ? getTableBodyReactionsFirst\r\n    : getTableBodyReactionsSecond;\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {getReactions(reaction).map(item => {\r\n        return (\r\n          <td key={crypto.randomUUID()}>\r\n            {Array.isArray(item) ? item.flat().join(\", \") : item}\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TablePrintReaction;\r\n","import { FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useDeleteReactionMutation,\r\n  useUpdateReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport {\r\n  handleUpdate,\r\n  handleEdit,\r\n} from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { MdSystemUpdateAlt } from \"react-icons/md\";\r\n\r\nconst TableBtns: FC<any> = ({ reaction }) => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const [updateReaction] = useUpdateReactionMutation();\r\n  const [deleteReaction] = useDeleteReactionMutation();\r\n\r\n  const handleReactionEdit = (printReactions: any, reactionID: any) => {\r\n    dispatch(handleEdit([printReactions, reactionID]));\r\n  };\r\n\r\n  const handleReactionUpdate = async (printReactions: any, reactionID: any) => {\r\n    const updatedEditedReaction = { ...editedReaction, isEdit: true };\r\n    dispatch(handleUpdate([printReactions, reactionID]));\r\n    await updateReaction(updatedEditedReaction);\r\n  };\r\n\r\n  const handleDelete = async (id?: string) => {\r\n    await deleteReaction(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <td>\r\n        {reaction.isEdit ? (\r\n          <button\r\n            onClick={() => handleReactionEdit(printReactions, reaction.id)}\r\n          >\r\n            <AiFillEdit style={{ fontSize: 25 }} />\r\n          </button>\r\n        ) : (\r\n          <button\r\n            onClick={() => handleReactionUpdate(printReactions, reaction.id)}\r\n          >\r\n            <MdSystemUpdateAlt style={{ fontSize: 25 }} />\r\n          </button>\r\n        )}\r\n      </td>\r\n      <td>\r\n        <button onClick={() => handleDelete(reaction.id)}>\r\n          <FaTrashAlt style={{ fontSize: 25 }} />\r\n        </button>\r\n      </td>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableBtns;\r\n","import { useEffect } from \"react\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport { useReactions } from \"../../../hooks/useReactions\";\r\nimport TableEditForm from \"../tableEditForm/TableEditForm\";\r\nimport TablePrintReaction from \"../tableReactionPrint/TablePrintReaction\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { getReactions } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport TableBtns from \"../tableBtns/TableBtns\";\r\n\r\nconst TableBody = () => {\r\n  const dispatch = useDispatch();\r\n  const { reactions } = useReactions();\r\n\r\n  const { printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n\r\n  useEffect(() => {\r\n    if (reactions) {\r\n      dispatch(getReactions(reactions));\r\n    }\r\n  }, [reactions, dispatch]);\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n  if (printReactions.length === 0) {\r\n    return <TableBodyRequestMessage message={\"Brak zapisanych reakcji\"} />;\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {printReactions?.map(reaction => {\r\n        return (\r\n          <tr key={reaction.id}>\r\n            {reaction.isEdit ? (\r\n              <TablePrintReaction reaction={reaction} />\r\n            ) : (\r\n              <TableEditForm />\r\n            )}\r\n            <TableBtns reaction={reaction} />\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","export const tableHeadDataFirst = [\r\n  \"Nazwa\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Milimole\",\r\n  \"Substrakt\",\r\n  \"Warunki\",\r\n  \"Rozpuszczalniki\",\r\n];\r\n\r\nexport const tableHeadDataSecond = [\r\n  \"Data start\",\r\n  \"Data koniec\",\r\n  \"Gdzina start\",\r\n  \"Godzina koniec\",\r\n];\r\n","\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { tableHeadDataFirst, tableHeadDataSecond } from \"./dataTableHead\";\r\n\r\nconst TableHead = () => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {isOpen\r\n          ? tableHeadDataFirst.map(reaction => {\r\n              return (\r\n                <td key={reaction} style={{ fontWeight: 900 }}>\r\n                  {reaction}\r\n                </td>\r\n              );\r\n            })\r\n          : tableHeadDataSecond.map(reaction => {\r\n              return (\r\n                <td key={reaction} style={{ fontWeight: 900 }}>\r\n                  {reaction}\r\n                </td>\r\n              );\r\n            })}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import { useDispatch } from \"react-redux\";\r\nimport TableReactions from \"../tableReactions/TableReactions\";\r\nimport TableBody from \"../tableBody/TableBody\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport { handleTableOpen } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\n\r\nconst IndexTable = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <div style={{ fontSize: 10, marginTop: 200 }}>\r\n        <div onClick={() => dispatch(handleTableOpen(true))}>\r\n          Warunki reakcji\r\n        </div>\r\n        <div onClick={() => dispatch(handleTableOpen(false))}>Czasy reakcji</div>\r\n      </div>\r\n      <TableReactions>\r\n        <TableHead />\r\n        <TableBody />\r\n      </TableReactions>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexTable;\r\n"],"names":["_ref","children","_jsx","style","fontSize","inputsPrintDataFirst","name","type","inputsPrintDataSecond","dispatch","useDispatch","editedReaction","useSelector","state","tableReactions","isOpen","toggleTable","handleInputChange","e","_e$target","target","value","handleChange","inputsPrintData","_Fragment","map","inputData","TextInput","text","onChange","getTableBodyReactionsFirst","reaction","reactionValues","Object","values","slice","shift","getTableBodyReactionsSecond","reactionValuesFiltered","concat","_toConsumableArray","message","_useReactionsQuery","useReactionsQuery","undefined","error","getReactions","isLoading","TableBodyRequestMessage","item","Array","isArray","flat","join","crypto","randomUUID","printReactions","_useUpdateReactionMut","useUpdateReactionMutation","updateReaction","_slicedToArray","_useDeleteReactionMut","useDeleteReactionMutation","deleteReaction","handleReactionUpdate","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reactionID","updatedEditedReaction","wrap","_context","prev","next","_objectSpread","isEdit","handleUpdate","stop","_x","_x2","apply","arguments","handleDelete","_ref3","_callee2","id","_context2","_x3","_jsxs","onClick","handleEdit","handleReactionEdit","AiFillEdit","MdSystemUpdateAlt","FaTrashAlt","reactions","useReactions","useEffect","length","TablePrintReaction","TableEditForm","TableBtns","tableHeadDataFirst","tableHeadDataSecond","fontWeight","marginTop","handleTableOpen","TableReactions","TableHead","TableBody"],"sourceRoot":""}