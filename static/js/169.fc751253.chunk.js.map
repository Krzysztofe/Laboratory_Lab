{"version":3,"file":"static/js/169.fc751253.chunk.js","mappings":"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","sources":["hooks/useValidationForm.tsx","pages/reactionForm/RequestMessage.tsx","pages/tableReactions/tableReactions/TableReactions.tsx","pages/tableReactions/tableEditForm/dataTableEditForm.tsx","pages/tableReactions/tableEditForm/TableEditForm.tsx","pages/tableReactions/tableCellsReaction/utilsTableCellsReaction.tsx","pages/tableReactions/tableCellsReaction/TableCellsReaction.tsx","pages/tableReactions/requestMesageTableBody/TableBodyRequestMessage.tsx","pages/tableReactions/tableBtns/TableBtns.tsx","pages/tableReactions/tableBody/TableBody.tsx","pages/tableReactions/tableHead/dataTableHead.tsx","pages/tableReactions/tableHead/TableHead.tsx","pages/tableReactions/_indexTableReactions/IndexTable.tsx"],"sourcesContent":["import { ModelReaction } from \"./useReactions\";\r\n\r\nexport interface ModelValidationErrors {\r\n  [key: string]: any;\r\n  name?: string;\r\n  technics?: string;\r\n  alcaloids?: string;\r\n  selectMilimolles?: string;\r\n  substract?: string;\r\n  solvents?: string;\r\n  selectReactionCondition?: string;\r\n  startDate?: string;\r\n  finishDate?: string;\r\n  startTime?: string;\r\n  finishTime?: string;\r\n}\r\n\r\nconst toString = (solventsValue: string[] | string) => {\r\n  return Array.isArray(solventsValue)\r\n    ? solventsValue.join(\", \")\r\n    : solventsValue;\r\n};\r\n\r\nexport const useValidationForm = (\r\n  editedReaction: ModelReaction,\r\n  idx?: number\r\n) => {\r\n\r\n  const conditions = [\r\n    [\r\n      {\r\n        condition: editedReaction?.name.trim().length < 6,\r\n        errorMessage: \"Min. 6 znaków\",\r\n        key: \"name\",\r\n      },\r\n      {\r\n        condition: editedReaction?.name.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"name\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          isNaN(+editedReaction.selectMilimolles) ||\r\n          +editedReaction.selectMilimolles < 1 ||\r\n          +editedReaction.selectMilimolles > 6,\r\n        errorMessage: \"Podaj liczbę: 1-6\",\r\n        key: \"selectMilimolles\",\r\n      },\r\n      {\r\n        condition:\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"GRAMINA\" &&\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"KOFEINA\" &&\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"NIKOTYNA\",\r\n        errorMessage: \"Podaj alkaloid\",\r\n        key: \"alcaloids\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.technics.trim().length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"technics\",\r\n      },\r\n      {\r\n        condition: editedReaction.technics.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"technics\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition:\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"CH3OH\") &&\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"DMSO\") &&\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"DMF\") &&\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"CHCL3\") &&\r\n          !toString(editedReaction.solvents)\r\n            .trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"C2H5OH\"),\r\n        errorMessage: \"Rozp. z listy\",\r\n        key: \"solvents\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIESZANIE\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"OGRZEWANIE\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIKROFALA\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"CHŁODZENIE\",\r\n        errorMessage: \"Podaj warunki\",\r\n        key: \"selectReactionCondition\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.substract.trim().length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"substract\",\r\n      },\r\n      {\r\n        condition: editedReaction.substract.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"substract\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.startDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition:\r\n          new Date(editedReaction.startDate) >\r\n          new Date(editedReaction.finishDate),\r\n        errorMessage: \"Data po rozpoczęciu\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.startTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startTime\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishTime\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const validationForm = () => {\r\n    let _errors: ModelValidationErrors = {};\r\n\r\n    const conditionSet =\r\n      idx === undefined ? conditions.flat() : conditions[idx];\r\n\r\n    conditionSet.forEach(({ condition, errorMessage, key }) => {\r\n      if (condition) {\r\n        _errors[key] = errorMessage;\r\n      }\r\n    });\r\n\r\n    return _errors;\r\n  };\r\n\r\n  return { validationForm };\r\n};\r\n","interface Props {\r\n  message: JSX.Element | string;\r\n  className: string;\r\n}\r\n\r\nconst RequestMessage = (props: Props) => {\r\n  return <div className={props.className}>{props.message}</div>;\r\n};\r\n\r\nexport default RequestMessage;\r\n","import { ReactNode } from \"react\";\r\n\r\nexport interface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nconst TableReactions = (props: Props) => {\r\n  return <table className=\"wrapper tableReactions__table\">{props.children}</table>;\r\n};\r\n\r\nexport default TableReactions;\r\n","export const inputsPrintDataFirst = [\r\n  { name: \"name\", type: \"text\" },\r\n  { name: \"technics\", type: \"text\" },\r\n  { name: \"alcaloids\", type: \"text\" },\r\n  { name: \"selectMilimolles\", type: \"text\" },\r\n  { name: \"substract\", type: \"text\" },\r\n  { name: \"selectReactionCondition\", type: \"text\" },\r\n  { name: \"solvents\", type: \"text\" },\r\n];\r\n\r\nexport const inputsPrintDataSecond = [\r\n  { name: \"startDate\", type: \"date\" },\r\n  { name: \"finishDate\", type: \"date\" },\r\n  { name: \"startTime\", type: \"time\" },\r\n  { name: \"finishTime\", type: \"time\" },\r\n];\r\n","import TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleChange } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  inputsPrintDataFirst,\r\n  inputsPrintDataSecond,\r\n} from \"./dataTableEditForm\";\r\n\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport {\r\n  useAddReactionMutation,\r\n  useReactionsQuery,\r\n} from \"../../../services/apiSlice\";\r\nimport RequestMessage from \"../../reactionForm/RequestMessage\";\r\n\r\nconst TableEditForm = () => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n  const [addReaction, success] = useAddReactionMutation();\r\n\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  const handleInputChange = (e: ChangeEvent) => {\r\n    const { name, value } = e.target;\r\n    dispatch(handleChange([name, value]));\r\n  };\r\n\r\n  const inputsPrintData = isOpen ? inputsPrintDataFirst : inputsPrintDataSecond;\r\n\r\n  // let rowContent = (\r\n  //   <>\r\n  //     {inputsPrintData.map(({ type, name }) => {\r\n  //       return (\r\n  //         <td style={{ position: \"relative\" }} key={name}>\r\n  //           <TextInput\r\n  //             label={\"\"}\r\n  //             type={type}\r\n  //             name={name}\r\n  //             value={editedReaction[name]}\r\n  //             handleChange={handleInputChange}\r\n  //             containerClass={\"editForm__textInputContainer\"}\r\n  //             labelClass={\"editForm__textInputLabel\"}\r\n  //             inputClass={`editForm__textInput ${\r\n  //               editedReaction[name] === editedReaction.solvents &&\r\n  //               \"editForm__textInput--solvents\"\r\n  //             }`}\r\n  //           />\r\n\r\n  //           <div className=\"editForm__error\">\r\n  //             <small>\r\n  //               {validationForm()[name as keyof typeof validationForm]}\r\n  //             </small>\r\n  //           </div>\r\n  //         </td>\r\n  //       );\r\n  //     })}\r\n  //   </>\r\n  // );\r\n\r\n  // if (success.isLoading) {\r\n  //   rowContent = (\r\n  //     <RequestMessage\r\n  //       message={<> Wysyła... </>}\r\n  //       className=\"formReaction__requestMessage\"\r\n  //     />\r\n  //   );\r\n  // }\r\n\r\n  // if (success.error) {\r\n  //   if (\"error\" in success.error)\r\n  //     rowContent = (\r\n  //       <RequestMessage\r\n  //         message={success.error.error}\r\n  //         className=\"formReaction__requestMessage\"\r\n  //       />\r\n  //     );\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      {inputsPrintData.map(({ type, name }) => {\r\n        return (\r\n          <td style={{ position: \"relative\" }} key={name}>\r\n            <TextInput\r\n              label={\"\"}\r\n              type={type}\r\n              name={name}\r\n              value={editedReaction[name]}\r\n              handleChange={handleInputChange}\r\n              containerClass={`editForm__textInputContainer ${\r\n                success.error && \"editError\"\r\n              }`}\r\n              labelClass={\"editForm__textInputLabel\"}\r\n              inputClass={`editForm__textInput`}\r\n            />\r\n\r\n            <div className=\"editForm__error\">\r\n              <small>\r\n                {validationForm()[name as keyof typeof validationForm]}\r\n              </small>\r\n            </div>\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableEditForm;\r\n","\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nexport const getTableBodyReactionsFirst = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction).slice(0, 8);\r\n  reactionValues.shift();\r\n  return reactionValues;\r\n};\r\n\r\nexport const getTableBodyReactionsSecond = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction);\r\n  const reactionValuesFiltered = [\r\n    reactionValues[0],\r\n    ...reactionValues.slice(8, 12),\r\n  ];\r\n  reactionValuesFiltered.shift();\r\n  return reactionValuesFiltered;\r\n};\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  getTableBodyReactionsFirst,\r\n  getTableBodyReactionsSecond,\r\n} from \"./utilsTableCellsReaction\";\r\nimport {\r\n  useReactionsQuery,\r\n  useAddReactionMutation,\r\n  useUpdateReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nconst TableCellsReaction = (props: Partial<ModelReaction>) => {\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n  // const [updateReaction, success] = useAddReactionMutation();\r\n  const [updateReaction, success] = useUpdateReactionMutation();\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const toString = (solventsValue: string) => {\r\n    if (Array.isArray(solventsValue)) {\r\n      return solventsValue.join(\", \");\r\n    }\r\n    return solventsValue;\r\n  };\r\n\r\n  const getReactions = isOpen\r\n    ? getTableBodyReactionsFirst\r\n    : getTableBodyReactionsSecond;\r\n\r\n  // isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  // if (error) {\r\n  //   if (\"error\" in error)\r\n  //     return <TableBodyRequestMessage message={error.error} />;\r\n\r\n  // }\r\n\r\n\r\n  return (\r\n    <>\r\n      {getReactions(props.reaction).map((reaction, idx) => {\r\n        return (\r\n          <td\r\n            className={success.error ? \"editError\" : \"\"}\r\n            key={crypto.randomUUID()}\r\n          >\r\n            {idx === 6\r\n              ? toString(reaction)\r\n                  .split(\"\")\r\n                  .map((char: string) => {\r\n                    return isNaN(Number(char)) ? (\r\n                      char\r\n                    ) : (\r\n                      <small\r\n                        className=\"numberInCheckbox\"\r\n                        key={crypto.randomUUID()}\r\n                      >\r\n                        {char}\r\n                      </small>\r\n                    );\r\n                  })\r\n              : reaction}\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableCellsReaction;\r\n","export interface Props {\r\n  message: string;\r\n}\r\n\r\nconst TableBodyRequestMessage = (props:Props) => {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td style={{ margin: \"0px auto\", width:\"fit-content\"}}>{props.message}</td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBodyRequestMessage;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useDeleteReactionMutation,\r\n  useUpdateReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport {\r\n  handleUpdate,\r\n  handleEdit,\r\n  handleClearEditForm,\r\n  handleToggleIsEdit,\r\n} from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { MdSystemUpdateAlt } from \"react-icons/md\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport RequestMessage from \"../../reactionForm/RequestMessage\";\r\n\r\nconst TableBtns = (props: Partial<ModelReaction>) => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction, printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n  const [updateReaction, success] = useUpdateReactionMutation();\r\n  const [deleteReaction] = useDeleteReactionMutation();\r\n\r\n  const handleReactionEdit = (\r\n    printReactions: ModelReaction[],\r\n    reactionID: string\r\n  ) => {\r\n    dispatch(handleEdit([printReactions, reactionID]));\r\n  };\r\n\r\n  const handleReactionUpdate = async (\r\n    printReactions: ModelReaction[],\r\n    reactionID: string\r\n  ) => {\r\n    if (Object.keys(validationForm()).length) return;\r\n    const updatedEditedReaction = { ...editedReaction, isEdit: true };\r\n    dispatch(handleUpdate([printReactions, reactionID]));\r\n    dispatch(handleClearEditForm());\r\n    await updateReaction(updatedEditedReaction);\r\n  };\r\n\r\n  const handleDelete = async (id?: string) => {\r\n    dispatch(handleToggleIsEdit());\r\n    await deleteReaction(id);\r\n  };\r\n\r\n  let tdBtns = (\r\n    <>\r\n      {props.reaction.isEdit ? (\r\n        <button\r\n          onClick={() => handleReactionEdit(printReactions, props.reaction.id)}\r\n          className=\"tableReactions__btn tableReactions__btn--edit\"\r\n        >\r\n          <AiFillEdit />\r\n        </button>\r\n      ) : (\r\n        <button\r\n          onClick={() =>\r\n            handleReactionUpdate(printReactions, props.reaction.id)\r\n          }\r\n          className=\"tableReactions__btn tableReactions__btn--edit\"\r\n        >\r\n          <MdSystemUpdateAlt />\r\n        </button>\r\n      )}\r\n\r\n      <button\r\n        onClick={() => handleDelete(props.reaction.id)}\r\n        className=\"tableReactions__btn tableReactions__btn--trash\"\r\n      >\r\n        <FaTrashAlt />\r\n      </button>\r\n    </>\r\n  );\r\n\r\n  if (success.error) {\r\n    if (\"error\" in success.error)\r\n      tdBtns = (\r\n        <RequestMessage\r\n          message={\"Błąd\"}\r\n          className=\"tableReactions__requestError\"\r\n        />\r\n      );\r\n  }\r\n\r\n  if (success.isLoading) {\r\n    tdBtns = (\r\n      <RequestMessage\r\n        message={\"Wysyła...\"}\r\n        className=\"tableReactions__requestMessage\"\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <td>\r\n      {tdBtns}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default TableBtns;\r\n","import { useEffect } from \"react\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport TableEditForm from \"../tableEditForm/TableEditForm\";\r\nimport TableCellsReaction from \"../tableCellsReaction/TableCellsReaction\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { getReactions } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport TableBtns from \"../tableBtns/TableBtns\";\r\n\r\nconst TableBody = () => {\r\n  const dispatch = useDispatch();\r\n  const { data, error, isLoading } = useReactionsQuery(undefined);\r\n\r\n  const { printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getReactions(data));\r\n  }, [data, dispatch]);\r\n\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n  if (printReactions.length === 0) {\r\n    return <TableBodyRequestMessage message={\"Brak zapisanych reakcji\"} />;\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <tbody>\r\n      {printReactions?.map((reaction, idx) => {\r\n        return (\r\n          <tr key={reaction.id}>\r\n            <td>{idx + 1}</td>\r\n            {reaction.isEdit ? (\r\n              <TableCellsReaction reaction={reaction} />\r\n            ) : (\r\n              <TableEditForm />\r\n            )}\r\n            <TableBtns reaction={reaction} />\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","export const tableHeadDataFirst = [\r\n  \"Nazwa\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Mole\",\r\n  \"Substrat\",\r\n  \"Warunki\",\r\n  \"Rozp.\",\r\n];\r\n\r\nexport const tableHeadDataSecond = [\r\n  \"Otwarcie\",\r\n  \"Zamknięcie\",\r\n  \"Początek\",\r\n  \"Koniec\",\r\n];\r\n\r\n\r\n<body>\r\n<main></main>\r\n<footer>uuuuu</footer>\r\n\r\n</body>","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { tableHeadDataFirst, tableHeadDataSecond } from \"./dataTableHead\";\r\n\r\nconst TableHead = () => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <td>nr</td>\r\n        {isOpen\r\n          ? tableHeadDataFirst.map(reaction => {\r\n              return <td key={reaction}>{reaction}</td>;\r\n            })\r\n          : tableHeadDataSecond.map(reaction => {\r\n              return <td key={crypto.randomUUID()}>{reaction}</td>;\r\n            })}\r\n        <td></td>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import { useDispatch } from \"react-redux\";\r\nimport TableReactions from \"../tableReactions/TableReactions\";\r\nimport TableBody from \"../tableBody/TableBody\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport { handleTableOpen } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\nconst IndexTable = () => {\r\n  const dispatch = useDispatch();\r\n  const { printReactions, editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n \r\n\r\n  const conditionsPrint =\r\n    !editedReaction.isEdit &&\r\n    (validationForm().name ||\r\n      validationForm().technics ||\r\n      validationForm().alcaloids ||\r\n      validationForm().selectMilimolles ||\r\n      validationForm().substract ||\r\n      validationForm().selectReactionCondition ||\r\n      validationForm().solvents)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Parametry\" };\r\n\r\n  const timePrint =\r\n    !editedReaction.isEdit &&\r\n    (validationForm().startDate ||\r\n      validationForm().finishDate ||\r\n      validationForm().startTime ||\r\n      validationForm().finishTime)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Czasy\" };\r\n\r\n  return (\r\n    <main className=\"tableReactions__main\">\r\n      <section className=\"wrapper tableReactions__headers\">\r\n        <div\r\n          onClick={() => dispatch(handleTableOpen(true))}\r\n          style={{\r\n            color: conditionsPrint.color,\r\n            backgroundColor: `${\r\n              isOpen ? \"rgb(142,151,164)\" : \"rgb(255 255 255)\"\r\n            }`,\r\n          }}\r\n          className=\"tableReactions__header\"\r\n        >\r\n          {conditionsPrint.text}\r\n        </div>\r\n        <div\r\n          onClick={() => dispatch(handleTableOpen(false))}\r\n          style={{\r\n            color: timePrint.color,\r\n            backgroundColor: `${\r\n              isOpen ? \"rgb(255 255 255)\" : \"rgb(142,151,164)\"\r\n            }`,\r\n          }}\r\n          className=\"tableReactions__header\"\r\n        >\r\n          {timePrint.text}\r\n        </div>\r\n        <div className=\"tableReactions__header  tableReactions__header--counter \">\r\n          {printReactions.length>0\r\n            ? `Liczba reakcji: ${printReactions.length}`\r\n            : \"\"}\r\n        </div>\r\n      </section>\r\n\r\n      <TableReactions>\r\n         <TableHead />\r\n        <TableBody /> \r\n      </TableReactions> \r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexTable;\r\n"],"names":["toString","solventsValue","Array","isArray","join","useValidationForm","editedReaction","idx","conditions","condition","name","trim","length","errorMessage","key","isNaN","selectMilimolles","alcaloids","toUpperCase","technics","solvents","toLocaleUpperCase","includes","selectReactionCondition","substract","startDate","finishDate","Date","startTime","finishTime","validationForm","_errors","undefined","flat","forEach","_ref","props","_jsx","className","children","message","inputsPrintDataFirst","type","inputsPrintDataSecond","dispatch","useDispatch","useSelector","state","tableReactions","isOpen","toggleTable","_useAddReactionMutati","useAddReactionMutation","_useAddReactionMutati2","_slicedToArray","success","_useReactionsQuery","useReactionsQuery","error","isLoading","handleInputChange","e","_e$target","target","value","handleChange","inputsPrintData","_Fragment","map","_jsxs","style","position","TextInput","label","containerClass","concat","labelClass","inputClass","getTableBodyReactionsFirst","reaction","reactionValues","Object","values","slice","shift","getTableBodyReactionsSecond","reactionValuesFiltered","_toConsumableArray","_useUpdateReactionMut","useUpdateReactionMutation","_useUpdateReactionMut2","getReactions","split","char","Number","crypto","randomUUID","margin","width","_useSelector","printReactions","updateReaction","_useDeleteReactionMut","useDeleteReactionMutation","deleteReaction","handleReactionUpdate","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reactionID","updatedEditedReaction","wrap","_context","prev","next","keys","abrupt","_objectSpread","isEdit","handleUpdate","handleClearEditForm","stop","_x","_x2","apply","arguments","handleDelete","_ref2","_callee2","id","_context2","handleToggleIsEdit","_x3","tdBtns","onClick","handleEdit","handleReactionEdit","AiFillEdit","MdSystemUpdateAlt","FaTrashAlt","RequestMessage","data","useEffect","TableBodyRequestMessage","TableCellsReaction","TableEditForm","TableBtns","tableHeadDataFirst","tableHeadDataSecond","conditionsPrint","color","text","timePrint","handleTableOpen","backgroundColor","TableReactions","TableHead","TableBody"],"sourceRoot":""}