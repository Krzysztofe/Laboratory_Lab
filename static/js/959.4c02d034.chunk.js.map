{"version":3,"file":"static/js/959.4c02d034.chunk.js","mappings":"yLAQA,EAJgD,SAAHA,GAAsB,IAAhBC,EAAQD,EAARC,SACjD,OAAOC,EAAAA,EAAAA,KAAA,SAAOC,MAAO,CAAEC,SAAU,IAAKH,SAAEA,GAC1C,E,iDCNaI,EAAuB,CAClC,CAAEC,KAAM,OAAQC,KAAM,QACtB,CAAED,KAAM,WAAYC,KAAM,QAC1B,CAAED,KAAM,YAAaC,KAAM,QAC3B,CAAED,KAAM,mBAAoBC,KAAM,QAClC,CAAED,KAAM,YAAaC,KAAM,QAC3B,CAAED,KAAM,0BAA2BC,KAAM,QACzC,CAAED,KAAM,WAAYC,KAAM,SAGfC,EAAwB,CACnC,CAAEF,KAAM,YAAaC,KAAM,QAC3B,CAAED,KAAM,aAAcC,KAAM,QAC5B,CAAED,KAAM,YAAaC,KAAM,QAC3B,CAAED,KAAM,aAAcC,KAAM,S,UC2C9B,EA5CsB,SAAHP,GAAYA,EAANS,OAAmB,IACpCC,GAAWC,EAAAA,EAAAA,MAETC,GAAmBC,EAAAA,EAAAA,KACzB,SAACC,GAAgB,OAAKA,EAAMC,cAAc,IADpCH,eAIAI,GAAWH,EAAAA,EAAAA,KACjB,SAACC,GAAgB,OAAKA,EAAMC,eAAeE,WAAW,IADhDD,OAGAE,GAAuBC,EAAAA,EAAAA,GAAsBP,GAA7CM,mBAEFE,EAAoB,SAACC,EAAgBC,GACzC,IAAAC,EAAwBF,EAAEG,OAAlBlB,EAAIiB,EAAJjB,KAAMmB,EAAKF,EAALE,MACdf,GAASgB,EAAAA,EAAAA,IAAa,CAACpB,EAAMmB,IAC/B,EAEME,EAAkBX,EAASX,EAAuBG,EAKxD,OACEN,EAAAA,EAAAA,KAAA0B,EAAAA,SAAA,CAAA3B,SACG0B,EAAgBE,KAAI,SAAAC,GAAqB,IAAlBvB,EAAIuB,EAAJvB,KAAMD,EAAIwB,EAAJxB,KAC5B,OACEyB,EAAAA,EAAAA,MAAA,MAAA9B,SAAA,EACEC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CACRC,KAAM,GACN1B,KAAMA,EACND,KAAMA,EACNmB,MAAOb,EAAeN,GACtB4B,SAAUd,KAEZlB,EAAAA,EAAAA,KAAA,SAAAD,SACGiB,IAAqBZ,OATjBA,EAab,KAGN,E,UCpDa6B,EAA6B,SAACC,GACzC,IAAMC,EAAiBC,OAAOC,OAAOH,GAAUI,MAAM,EAAG,GAExD,OADAH,EAAeI,QACRJ,CACT,EAEaK,EAA8B,SAACN,GAC1C,IAAMC,EAAiBC,OAAOC,OAAOH,GAC/BO,EAAsB,CAC1BN,EAAe,IAAEO,QAAAC,EAAAA,EAAAA,GACdR,EAAeG,MAAM,EAAG,MAG7B,OADAG,EAAuBF,QAChBE,CACT,ECFA,EAZkE,SAAH3C,GAExD,IADL8C,EAAO9C,EAAP8C,QAEA,OACE5C,EAAAA,EAAAA,KAAA,SAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAK6C,OAIb,EC4BA,EA9B8C,SAAH9C,GAAsB,IAAhBoC,EAAQpC,EAARoC,SAC/CW,GAA6BC,EAAAA,EAAAA,SAAkBC,GAAvCC,EAAKH,EAALG,MAMFC,GANkBJ,EAATK,WAEIvC,EAAAA,EAAAA,KACjB,SAACC,GAAgB,OAAKA,EAAMC,eAAeE,WAAW,IADhDD,OAKJmB,EACAO,GAGJ,OAAIQ,GACE,UAAWA,GACNhD,EAAAA,EAAAA,KAACmD,EAAuB,CAACP,QAASI,EAAMA,SAIjDhD,EAAAA,EAAAA,KAAA0B,EAAAA,SAAA,CAAA3B,SACGkD,EAAaf,GAAUP,KAAI,SAAAyB,GAC1B,OACEpD,EAAAA,EAAAA,KAAA,MAAAD,SACGsD,MAAMC,QAAQF,GAAQA,EAAKG,OAAOC,KAAK,MAAQJ,GADzCK,OAAOC,aAIpB,KAGN,E,sEC6BA,EApD2B,SAAH5D,GAA8B,IAAxBoC,EAAQpC,EAARoC,SACtB1B,GADsCV,EAANS,QACrBE,EAAAA,EAAAA,OACjBkD,GAA2ChD,EAAAA,EAAAA,KACzC,SAACC,GAAgB,OAAKA,EAAMC,cAAc,IADpCH,EAAciD,EAAdjD,eAAgBkD,EAAcD,EAAdC,eAGhB5C,GAAuBC,EAAAA,EAAAA,GAAsBP,GAA7CM,mBACR6C,GAAyBC,EAAAA,EAAAA,MAAlBC,GAA6CC,EAAAA,EAAAA,GAAAH,EAAA,GAA/B,GACrBI,GAAyBC,EAAAA,EAAAA,MAAlBC,GAA6CH,EAAAA,EAAAA,GAAAC,EAAA,GAA/B,GAMfG,EAAoB,eAAAxC,GAAAyC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOZ,EAAqBa,GAAe,IAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAClE1C,OAAO2C,KAAK/D,KAAsBgE,OAAO,CAADJ,EAAAE,KAAA,eAAAF,EAAAK,OAAA,iBAES,OAD/CP,GAAqBQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQxE,GAAc,IAAEyE,QAAQ,IAC3D3E,GAAS4E,EAAAA,EAAAA,IAAa,CAACxB,EAAgBa,KAAcG,EAAAE,KAAA,EAC/Cf,EAAeW,GAAuB,KAAD,mBAAAE,EAAAS,OAAA,GAAAb,EAAA,KAC5C,gBALyBc,EAAAC,GAAA,OAAA3D,EAAA4D,MAAA,KAAAC,UAAA,KASpBC,EAAY,eAAAC,GAAAtB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqB,EAAOC,GAAW,OAAAvB,EAAAA,EAAAA,KAAAK,MAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cAAAgB,EAAAhB,KAAA,EAC/BX,EAAe0B,GAAI,KAAD,mBAAAC,EAAAT,OAAA,GAAAO,EAAA,KACzB,gBAFiBG,GAAA,OAAAJ,EAAAH,MAAA,KAAAC,UAAA,KAIlB,OACE5D,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAA3B,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SACGmC,EAASiD,QACRnF,EAAAA,EAAAA,KAAA,UACEgG,QAAS,kBAtBQ,SAACpC,EAAqBa,GAC/CjE,GAASyF,EAAAA,EAAAA,IAAW,CAACrC,EAAgBa,IACvC,CAoByByB,CAAmBtC,EAAgB1B,EAAS2D,GAAG,EAAC9F,UAE/DC,EAAAA,EAAAA,KAACmG,EAAAA,IAAU,CAAClG,MAAO,CAAEC,SAAU,SAGjCF,EAAAA,EAAAA,KAAA,UACEgG,QAAS,kBAAM5B,EAAqBR,EAAgB1B,EAAS2D,GAAG,EAAC9F,UAEjEC,EAAAA,EAAAA,KAACoG,EAAAA,IAAiB,CAACnG,MAAO,CAAEC,SAAU,WAI5CF,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,UAAQgG,QAAS,kBAAMN,EAAaxD,EAAS2D,GAAG,EAAC9F,UAC/CC,EAAAA,EAAAA,KAACqG,EAAAA,IAAU,CAACpG,MAAO,CAAEC,SAAU,YAKzC,E,oBCRA,EA9CkB,WAChB,IAAMM,GAAWC,EAAAA,EAAAA,MACT6F,GAAcC,EAAAA,EAAAA,KAAdD,UAER3C,GAA2ChD,EAAAA,EAAAA,KACzC,SAACC,GAAgB,OAAKA,EAAMC,cAAc,IADpB+C,GAAFD,EAAdjD,eAA8BiD,EAAdC,gBAIxB4C,ECbiC,WACjC,IAAA3C,GAAyBC,EAAAA,EAAAA,MACjBpD,IAD4CsD,EAAAA,EAAAA,GAAAH,EAAA,GAA/B,IACMlD,EAAAA,EAAAA,KACzB,SAACC,GAAgB,OAAKA,EAAMC,cAAc,IADpCH,gBAoBR,MAAO,CAAEH,QAfMkG,EAAAA,EAAAA,IAAU,CACvBC,eAAaxB,EAAAA,EAAAA,GAAA,GAAOxE,GACpBiG,iBAAkBC,EAAAA,GAAW,CAC3BxG,KAAMwG,EAAAA,KACHC,IAAI,EAAG,wBACPC,IAAI,EAAG,mBACPC,SAAS,iBACZC,SAAUJ,EAAAA,KACPC,IAAI,EAAG,wBACPC,IAAI,EAAG,mBACPC,SAAS,mBAEdE,SAAU,WAAO,IAIrB,CDVqBC,GAAX3G,EAAMiG,EAANjG,OACRsC,GAA6BC,EAAAA,EAAAA,SAAkBC,GAAvCC,EAAKH,EAALG,MAAgBH,EAATK,UAWf,OAPAiE,EAAAA,EAAAA,YAAU,WACJb,GACF9F,GAASyC,EAAAA,EAAAA,IAAaqD,GAE1B,GAAG,CAACA,EAAW9F,IAGXwC,GACE,UAAWA,GACNhD,EAAAA,EAAAA,KAACmD,EAAuB,CAACP,QAASI,EAAMA,QAErB,IAA1BY,EAAeoB,QACVhF,EAAAA,EAAAA,KAACmD,EAAuB,CAACP,QAAS,6BAIzC5C,EAAAA,EAAAA,KAAA,SAAAD,SACiB,OAAd6D,QAAc,IAAdA,OAAc,EAAdA,EAAgBjC,KAAI,SAAAO,GACnB,OACEL,EAAAA,EAAAA,MAAA,MAAA9B,SAAA,CACGmC,EAASiD,QACRnF,EAAAA,EAAAA,KAACoH,EAAkB,CAAClF,SAAUA,KAE9BlC,EAAAA,EAAAA,KAACqH,EAAa,CAAC9G,OAAQA,KAEzBP,EAAAA,EAAAA,KAACsH,EAAS,CAACpF,SAAUA,EAAU3B,OAAQA,MANhC2B,EAAS2D,GAStB,KAGN,EExDa0B,EAAqB,CAChC,QACA,WACA,YACA,WACA,YACA,UACA,mBAGWC,EAAsB,CACjC,aACA,cACA,eACA,kBCmBF,EA5BkB,WAChB,IAAQ1G,GAAWH,EAAAA,EAAAA,KACjB,SAACC,GAAgB,OAAKA,EAAMC,eAAeE,WAAW,IADhDD,OAIR,OACEd,EAAAA,EAAAA,KAAA,SAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,SACGe,EACGyG,EAAmB5F,KAAI,SAAAO,GACrB,OACElC,EAAAA,EAAAA,KAAA,MAAmBC,MAAO,CAAEwH,WAAY,KAAM1H,SAC3CmC,GADMA,EAIb,IACAsF,EAAoB7F,KAAI,SAAAO,GACtB,OACElC,EAAAA,EAAAA,KAAA,MAAmBC,MAAO,CAAEwH,WAAY,KAAM1H,SAC3CmC,GADMA,EAIb,OAIZ,EC+BA,EArDmB,WACjB,IAAM1B,GAAWC,EAAAA,EAAAA,MACTC,GAAmBC,EAAAA,EAAAA,KACzB,SAACC,GAAgB,OAAKA,EAAMC,cAAc,IADpCH,eAGAM,GAAuBC,EAAAA,EAAAA,GAAsBP,GAA7CM,mBACFqB,EAAS3B,EAAemF,GAExB6B,EACJrF,IACCrB,IAAqBZ,MACpBY,IAAqBgG,UACrBhG,IAAqB2G,WACrB3G,IAAqB4G,kBACrB5G,IAAqB6G,WACrB7G,IAAqB8G,yBACrB9G,IAAqB+G,UACnB,CAAEC,MAAO,MAAOjG,KAAM,iCACtB,CAAEiG,MAAO,QAASjG,KAAM,mBAExBkG,EACJ5F,IACCrB,IAAqBkH,WACpBlH,IAAqBmH,YACrBnH,IAAqBoH,WACrBpH,IAAqBqH,YACnB,CAAEL,MAAO,MAAOjG,KAAM,+BACtB,CAAEiG,MAAO,QAASjG,KAAM,iBAE9B,OACEF,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAA3B,SAAA,EACE8B,EAAAA,EAAAA,MAAA,OAAK5B,MAAO,CAAEC,SAAU,GAAIoI,UAAW,KAAMvI,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,OACEgG,QAAS,kBAAMxF,GAAS+H,EAAAA,EAAAA,KAAgB,GAAM,EAC9CtI,MAAO,CAAE+H,MAAON,EAAgBM,OAAQjI,SAEvC2H,EAAgB3F,QAEnB/B,EAAAA,EAAAA,KAAA,OACEgG,QAAS,kBAAMxF,GAAS+H,EAAAA,EAAAA,KAAgB,GAAO,EAC/CtI,MAAO,CAAE+H,MAAOC,EAAUD,OAAQjI,SAEjCkI,EAAUlG,WAGfF,EAAAA,EAAAA,MAAC2G,EAAc,CAAAzI,SAAA,EACbC,EAAAA,EAAAA,KAACyI,EAAS,KACVzI,EAAAA,EAAAA,KAAC0I,EAAS,SAIlB,C,uDC5CO,IAAMzH,EAAwB,SAACP,EAAqBiI,GACzD,IAAMC,EAAa,CACjB,CACE,CACEC,UAAWnI,EAAeN,KAAK4E,OAAS,EACxC8D,aAAc,eACd1H,IAAK,QAEP,CACEyH,UAAWnI,EAAesG,SAAShC,OAAS,EAC5C8D,aAAc,eACd1H,IAAK,YAEP,CACEyH,WAAYnI,EAAeiH,UAC3BmB,aAAc,WACd1H,IAAK,cAGT,CACE,CACEyH,UACsC,gBAApCnI,EAAekH,mBACdlH,EAAekH,iBAClBkB,aAAc,WACd1H,IAAK,oBAEP,CACEyH,UAAWnI,EAAemH,UAAU7C,OAAS,EAC7C8D,aAAc,eACd1H,IAAK,cAIT,CACE,CACEyH,WAAYnI,EAAeqH,SAAS/C,OACpC8D,aAAc,WACd1H,IAAK,YAEP,CACEyH,UAAsD,gBAA3CnI,EAAeoH,wBAC1BgB,aAAc,WACd1H,IAAK,4BAIT,CACE,CACEyH,WAAYnI,EAAewH,UAC3BY,aAAc,WACd1H,IAAK,aAEP,CACEyH,WAAYnI,EAAeyH,WAC3BW,aAAc,WACd1H,IAAK,cAEP,CACEyH,WAAYnI,EAAe0H,UAC3BU,aAAc,WACd1H,IAAK,aAEP,CACEyH,WAAYnI,EAAe2H,WAC3BS,aAAc,WACd1H,IAAK,gBAoBX,MAAO,CAAEJ,mBAfkB,WACzB,IAAM+H,EAAc,CAAC,EAWrB,YARUhG,IAAR4F,EAAoBC,EAAWrF,OAASqF,EAAWD,IAExCK,SAAQ,SAAAlJ,GAAuC,IAApC+I,EAAS/I,EAAT+I,UAAWC,EAAYhJ,EAAZgJ,aAAc1H,EAAGtB,EAAHsB,IAC3CyH,IACFE,EAAO3H,GAAO0H,EAElB,IAEOC,CACT,EAGF,C","sources":["pages/tableReactions/tableReactions/TableReactions.tsx","pages/tableReactions/tableEditForm/dataTableEditForm.tsx","pages/tableReactions/tableEditForm/TableEditForm.tsx","pages/tableReactions/tableReactionPrint/utilsTableReactionPrint.tsx","pages/tableReactions/requestMesageTableBody/TableBodyRequestMessage.tsx","pages/tableReactions/tableReactionPrint/TablePrintReaction.tsx","pages/tableReactions/tableBtns/TableBtns.tsx","pages/tableReactions/tableBody/TableBody.tsx","pages/tableReactions/tableEditForm/useFormik.tsx","pages/tableReactions/tableHead/dataTableHead.tsx","pages/tableReactions/tableHead/TableHead.tsx","pages/tableReactions/_indexTableReactions/IndexTable.tsx","pages/tableReactions/tableEditForm/useValidationEditForm.tsx"],"sourcesContent":["import { FC } from \"react\";\r\n\r\nimport { ModelTableReactions } from \"./modelTableReactions\";\r\n\r\nconst TableReactions: FC<ModelTableReactions> = ({ children }) => {\r\n  return <table style={{ fontSize: 10 }}>{children}</table>;\r\n};\r\n\r\nexport default TableReactions;\r\n","export const inputsPrintDataFirst = [\r\n  { name: \"name\", type: \"text\" },\r\n  { name: \"technics\", type: \"text\" },\r\n  { name: \"alcaloids\", type: \"text\" },\r\n  { name: \"selectMilimolles\", type: \"text\" },\r\n  { name: \"substract\", type: \"text\" },\r\n  { name: \"selectReactionCondition\", type: \"text\" },\r\n  { name: \"solvents\", type: \"text\" },\r\n];\r\n\r\nexport const inputsPrintDataSecond = [\r\n  { name: \"startDate\", type: \"date\" },\r\n  { name: \"finishDate\", type: \"date\" },\r\n  { name: \"startTime\", type: \"time\" },\r\n  { name: \"finishTime\", type: \"time\" },\r\n];\r\n","import { useState } from \"react\";\r\nimport TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleChange } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  inputsPrintDataFirst,\r\n  inputsPrintDataSecond,\r\n} from \"./dataTableEditForm\";\r\n\r\nimport { useValidationEditForm } from \"../tableEditForm/useValidationEditForm\";\r\n\r\nconst TableEditForm = ({ formik }: any) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n  const { validationEditForm } = useValidationEditForm(editedReaction);\r\n\r\n  const handleInputChange = (e: ChangeEvent, key: any) => {\r\n    const { name, value } = e.target;\r\n    dispatch(handleChange([name, value]));\r\n  };\r\n\r\n  const inputsPrintData = isOpen ? inputsPrintDataFirst : inputsPrintDataSecond;\r\n\r\n// console.log(\"edit\", validationEditForm());\r\n\r\n\r\n  return (\r\n    <>\r\n      {inputsPrintData.map(({ type, name }) => {\r\n        return (\r\n          <td key={name}>\r\n            <TextInput\r\n              text={\"\"}\r\n              type={type}\r\n              name={name}\r\n              value={editedReaction[name]}\r\n              onChange={handleInputChange}\r\n            />\r\n            <small>\r\n              {validationEditForm()[name as keyof typeof validationEditForm]}\r\n            </small>\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableEditForm;\r\n","\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nexport const getTableBodyReactionsFirst = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction).slice(0, 8);\r\n  reactionValues.shift();\r\n  return reactionValues;\r\n};\r\n\r\nexport const getTableBodyReactionsSecond = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction);\r\n  const reactionValuesFiltered = [\r\n    reactionValues[0],\r\n    ...reactionValues.slice(8, 13),\r\n  ];\r\n  reactionValuesFiltered.shift();\r\n  return reactionValuesFiltered;\r\n};\r\n","import { FC } from \"react\";\r\nimport { ModelTableBodyRequestMessage } from \"./ModelTableBodyRequestMessage\";\r\n\r\nconst TableBodyRequestMessage: FC<ModelTableBodyRequestMessage> = ({\r\n  message,\r\n}) => {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td>{message}</td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBodyRequestMessage;\r\n","import { FC } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  getTableBodyReactionsFirst,\r\n  getTableBodyReactionsSecond,\r\n} from \"./utilsTableReactionPrint\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nconst TablePrintReaction: FC<ModelReaction> = ({ reaction }) => {\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const getReactions = isOpen\r\n    ? getTableBodyReactionsFirst\r\n    : getTableBodyReactionsSecond;\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {getReactions(reaction).map(item => {\r\n        return (\r\n          <td key={crypto.randomUUID()}>\r\n            {Array.isArray(item) ? item.flat().join(\", \") : item}\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TablePrintReaction;\r\n","import { FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useDeleteReactionMutation,\r\n  useUpdateReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport {\r\n  handleUpdate,\r\n  handleEdit,\r\n} from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { MdSystemUpdateAlt } from \"react-icons/md\";\r\nimport { useValidationEditForm } from \"../tableEditForm/useValidationEditForm\";\r\n\r\nconst TableBtns: FC<any> = ({ reaction, formik }) => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction, printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { validationEditForm } = useValidationEditForm(editedReaction);\r\n  const [updateReaction] = useUpdateReactionMutation();\r\n  const [deleteReaction] = useDeleteReactionMutation();\r\n\r\n  const handleReactionEdit = (printReactions: any, reactionID: any) => {\r\n    dispatch(handleEdit([printReactions, reactionID]));\r\n  };\r\n\r\n  const handleReactionUpdate = async (printReactions: any, reactionID: any) => {\r\n    if (Object.keys(validationEditForm()).length) return;\r\n    const updatedEditedReaction = { ...editedReaction, isEdit: true };\r\n    dispatch(handleUpdate([printReactions, reactionID]));\r\n    await updateReaction(updatedEditedReaction);\r\n  };\r\n\r\n\r\n\r\n  const handleDelete = async (id?: string) => {\r\n    await deleteReaction(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <td>\r\n        {reaction.isEdit ? (\r\n          <button\r\n            onClick={() => handleReactionEdit(printReactions, reaction.id)}\r\n          >\r\n            <AiFillEdit style={{ fontSize: 25 }} />\r\n          </button>\r\n        ) : (\r\n          <button\r\n            onClick={() => handleReactionUpdate(printReactions, reaction.id)}\r\n          >\r\n            <MdSystemUpdateAlt style={{ fontSize: 25 }} />\r\n          </button>\r\n        )}\r\n      </td>\r\n      <td>\r\n        <button onClick={() => handleDelete(reaction.id)}>\r\n          <FaTrashAlt style={{ fontSize: 25 }} />\r\n        </button>\r\n      </td>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableBtns;\r\n","import { useEffect } from \"react\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport { useReactions } from \"../../../hooks/useReactions\";\r\nimport TableEditForm from \"../tableEditForm/TableEditForm\";\r\nimport TablePrintReaction from \"../tableReactionPrint/TablePrintReaction\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { getReactions } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport TableBtns from \"../tableBtns/TableBtns\";\r\nimport { useFormikOperations } from \"../tableEditForm/useFormik\";\r\n\r\nconst TableBody = () => {\r\n  const dispatch = useDispatch();\r\n  const { reactions } = useReactions();\r\n\r\n  const { editedReaction, printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { formik } = useFormikOperations();\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (reactions) {\r\n      dispatch(getReactions(reactions));\r\n    }\r\n  }, [reactions, dispatch]);\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n  if (printReactions.length === 0) {\r\n    return <TableBodyRequestMessage message={\"Brak zapisanych reakcji\"} />;\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {printReactions?.map(reaction => {\r\n        return (\r\n          <tr key={reaction.id}>\r\n            {reaction.isEdit ? (\r\n              <TablePrintReaction reaction={reaction} />\r\n            ) : (\r\n              <TableEditForm formik={formik} />\r\n            )}\r\n            <TableBtns reaction={reaction} formik={formik} />\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useUpdateReactionMutation } from \"../../../services/apiSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleUpdate } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\nexport const useFormikOperations = () => {\r\n  const [updateReaction] = useUpdateReactionMutation();\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n//   console.log(\"use editreaction\", editedReaction);\r\n  const formik = useFormik({\r\n    initialValues: { ...editedReaction },\r\n    validationSchema: Yup.object({\r\n      name: Yup.string()\r\n        .max(8, \"Maksimum 6 znaków\")\r\n        .min(3, \"Minimum 3 znaki\")\r\n        .required(\"Pole wymagane\"),\r\n      technics: Yup.string()\r\n        .max(8, \"Maksimum 6 znaków\")\r\n        .min(3, \"Minimum 3 znaki\")\r\n        .required(\"Pole wymagane\"),\r\n    }),\r\n    onSubmit: () => {},\r\n  });\r\n//   console.log(\"use formik\", formik.values);\r\n  return { formik };\r\n};\r\n","export const tableHeadDataFirst = [\r\n  \"Nazwa\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Milimole\",\r\n  \"Substrakt\",\r\n  \"Warunki\",\r\n  \"Rozpuszczalniki\",\r\n];\r\n\r\nexport const tableHeadDataSecond = [\r\n  \"Data start\",\r\n  \"Data koniec\",\r\n  \"Gdzina start\",\r\n  \"Godzina koniec\",\r\n];\r\n","\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { tableHeadDataFirst, tableHeadDataSecond } from \"./dataTableHead\";\r\n\r\nconst TableHead = () => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {isOpen\r\n          ? tableHeadDataFirst.map(reaction => {\r\n              return (\r\n                <td key={reaction} style={{ fontWeight: 900 }}>\r\n                  {reaction}\r\n                </td>\r\n              );\r\n            })\r\n          : tableHeadDataSecond.map(reaction => {\r\n              return (\r\n                <td key={reaction} style={{ fontWeight: 900 }}>\r\n                  {reaction}\r\n                </td>\r\n              );\r\n            })}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import { useDispatch } from \"react-redux\";\r\nimport TableReactions from \"../tableReactions/TableReactions\";\r\nimport TableBody from \"../tableBody/TableBody\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport { handleTableOpen } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useValidationEditForm } from \"../tableEditForm/useValidationEditForm\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\nconst IndexTable = () => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { validationEditForm } = useValidationEditForm(editedReaction);\r\n  const values = editedReaction.id\r\n\r\n  const conditionsPrint =\r\n    values &&\r\n    (validationEditForm().name ||\r\n      validationEditForm().technics ||\r\n      validationEditForm().alcaloids ||\r\n      validationEditForm().selectMilimolles ||\r\n      validationEditForm().substract ||\r\n      validationEditForm().selectReactionCondition ||\r\n      validationEditForm().solvents)\r\n      ? { color: \"red\", text: \"Warunki reakcji - brak danych\" }\r\n      : { color: \"black\", text: \"Warunki reakcji\" };\r\n\r\n  const timePrint =\r\n    values &&\r\n    (validationEditForm().startDate ||\r\n      validationEditForm().finishDate ||\r\n      validationEditForm().startTime ||\r\n      validationEditForm().finishTime)\r\n      ? { color: \"red\", text: \"Czasy reakcji - brak danych\" }\r\n      : { color: \"black\", text: \"Czasy reakcji\" };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ fontSize: 10, marginTop: 200 }}>\r\n        <div\r\n          onClick={() => dispatch(handleTableOpen(true))}\r\n          style={{ color: conditionsPrint.color }}\r\n        >\r\n          {conditionsPrint.text}\r\n        </div>\r\n        <div\r\n          onClick={() => dispatch(handleTableOpen(false))}\r\n          style={{ color: timePrint.color }}\r\n        >\r\n          {timePrint.text}\r\n        </div>\r\n      </div>\r\n      <TableReactions>\r\n        <TableHead />\r\n        <TableBody />\r\n      </TableReactions>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexTable;\r\n","\r\nexport interface Error {\r\n  error?: boolean;\r\n  name?: any;\r\n  technics?: any;\r\n  alcaloids?: any;\r\n  selectMilimolles?: string;\r\n  substract?: string;\r\n  solvents?: string;\r\n  selectReactionCondition?: string;\r\n  startDate?: string;\r\n  finishDate?: string;\r\n  startTime?: string;\r\n  finishTime?: string;\r\n}\r\n\r\nexport const useValidationEditForm = (editedReaction: any, idx?: any) => {\r\n  const conditions = [\r\n    [\r\n      {\r\n        condition: editedReaction.name.length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"name\",\r\n      },\r\n      {\r\n        condition: editedReaction.technics.length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"technics\",\r\n      },\r\n      {\r\n        condition: !editedReaction.alcaloids,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"alcaloids\",\r\n      },\r\n    ],\r\n    [\r\n      {\r\n        condition:\r\n          editedReaction.selectMilimolles === \"--Wybierz--\" ||\r\n          !editedReaction.selectMilimolles,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"selectMilimolles\",\r\n      },\r\n      {\r\n        condition: editedReaction.substract.length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"substract\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.solvents.length,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"solvents\",\r\n      },\r\n      {\r\n        condition: editedReaction.selectReactionCondition === \"--Wybierz--\",\r\n        errorMessage: \"Wymagane\",\r\n        key: \"selectReactionCondition\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.startDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.startTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startTime\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishTime\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const validationEditForm = () => {\r\n    const errors: any = {};\r\n\r\n    const conditionSet =\r\n      idx === undefined ? conditions.flat() : conditions[idx];\r\n\r\n    conditionSet.forEach(({ condition, errorMessage, key }) => {\r\n      if (condition) {\r\n        errors[key] = errorMessage;\r\n      }\r\n    });\r\n\r\n    return errors;\r\n  };\r\n\r\n  return { validationEditForm };\r\n};\r\n"],"names":["_ref","children","_jsx","style","fontSize","inputsPrintDataFirst","name","type","inputsPrintDataSecond","formik","dispatch","useDispatch","editedReaction","useSelector","state","tableReactions","isOpen","toggleTable","validationEditForm","useValidationEditForm","handleInputChange","e","key","_e$target","target","value","handleChange","inputsPrintData","_Fragment","map","_ref2","_jsxs","TextInput","text","onChange","getTableBodyReactionsFirst","reaction","reactionValues","Object","values","slice","shift","getTableBodyReactionsSecond","reactionValuesFiltered","concat","_toConsumableArray","message","_useReactionsQuery","useReactionsQuery","undefined","error","getReactions","isLoading","TableBodyRequestMessage","item","Array","isArray","flat","join","crypto","randomUUID","_useSelector","printReactions","_useUpdateReactionMut","useUpdateReactionMutation","updateReaction","_slicedToArray","_useDeleteReactionMut","useDeleteReactionMutation","deleteReaction","handleReactionUpdate","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reactionID","updatedEditedReaction","wrap","_context","prev","next","keys","length","abrupt","_objectSpread","isEdit","handleUpdate","stop","_x","_x2","apply","arguments","handleDelete","_ref3","_callee2","id","_context2","_x3","onClick","handleEdit","handleReactionEdit","AiFillEdit","MdSystemUpdateAlt","FaTrashAlt","reactions","useReactions","_useFormikOperations","useFormik","initialValues","validationSchema","Yup","max","min","required","technics","onSubmit","useFormikOperations","useEffect","TablePrintReaction","TableEditForm","TableBtns","tableHeadDataFirst","tableHeadDataSecond","fontWeight","conditionsPrint","alcaloids","selectMilimolles","substract","selectReactionCondition","solvents","color","timePrint","startDate","finishDate","startTime","finishTime","marginTop","handleTableOpen","TableReactions","TableHead","TableBody","idx","conditions","condition","errorMessage","errors","forEach"],"sourceRoot":""}