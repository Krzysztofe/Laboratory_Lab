{"version":3,"file":"static/js/169.7b8cf71d.chunk.js","mappings":"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","sources":["hooks/useValidationForm.tsx","pages/tableReactions/tableReactions/TableReactions.tsx","pages/tableReactions/tableEditForm/dataTableEditForm.tsx","pages/tableReactions/tableEditForm/TableEditForm.tsx","pages/tableReactions/tableCellsReaction/utilsTableCellsReaction.tsx","pages/tableReactions/requestMesageTableBody/TableBodyRequestMessage.tsx","pages/tableReactions/tableCellsReaction/TableCellsReaction.tsx","pages/tableReactions/tableBtns/TableBtns.tsx","pages/tableReactions/tableBody/TableBody.tsx","pages/tableReactions/tableHead/dataTableHead.tsx","pages/tableReactions/tableHead/TableHead.tsx","pages/tableReactions/_indexTableReactions/IndexTable.tsx"],"sourcesContent":["export interface Error {\r\n  error?: boolean;\r\n  name?: any;\r\n  technics?: any;\r\n  alcaloids?: any;\r\n  selectMilimolles?: string;\r\n  substract?: string;\r\n  solvents?: string;\r\n  selectReactionCondition?: string;\r\n  startDate?: string;\r\n  finishDate?: string;\r\n  startTime?: string;\r\n  finishTime?: string;\r\n}\r\n\r\nexport const useValidationForm = (editedReaction: any, idx?: any) => {\r\n  const conditions = [\r\n    [\r\n      {\r\n        condition: editedReaction.name.length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"name\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          editedReaction.selectMilimolles === \"--Wybierz--\" ||\r\n          !editedReaction.selectMilimolles,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"selectMilimolles\",\r\n      },\r\n      {\r\n        condition: !editedReaction.alcaloids,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"alcaloids\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.technics.length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"technics\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.solvents.length,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"solvents\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.selectReactionCondition === \"--Wybierz--\",\r\n        errorMessage: \"Wymagane\",\r\n        key: \"selectReactionCondition\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.substract.length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"substract\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.startDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.startTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startTime\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishTime\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const validationForm = () => {\r\n    const errors: any = {};\r\n\r\n    const conditionSet =\r\n      idx === undefined ? conditions.flat() : conditions[idx];\r\n\r\n    conditionSet.forEach(({ condition, errorMessage, key }) => {\r\n      if (condition) {\r\n        errors[key] = errorMessage;\r\n      }\r\n    });\r\n\r\n    return errors;\r\n  };\r\n\r\n  return { validationForm };\r\n};\r\n","import { ReactNode } from \"react\";\r\n\r\nexport interface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nconst TableReactions = (props: Props) => {\r\n  return <table className=\"wrapper tableReactions__table\">{props.children}</table>;\r\n};\r\n\r\nexport default TableReactions;\r\n","export const inputsPrintDataFirst = [\r\n  { name: \"name\", type: \"text\" },\r\n  { name: \"technics\", type: \"text\" },\r\n  { name: \"alcaloids\", type: \"text\" },\r\n  { name: \"selectMilimolles\", type: \"text\" },\r\n  { name: \"substract\", type: \"text\" },\r\n  { name: \"selectReactionCondition\", type: \"text\" },\r\n  { name: \"solvents\", type: \"text\" },\r\n];\r\n\r\nexport const inputsPrintDataSecond = [\r\n  { name: \"startDate\", type: \"date\" },\r\n  { name: \"finishDate\", type: \"date\" },\r\n  { name: \"startTime\", type: \"time\" },\r\n  { name: \"finishTime\", type: \"time\" },\r\n];\r\n","import TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleChange } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  inputsPrintDataFirst,\r\n  inputsPrintDataSecond,\r\n} from \"./dataTableEditForm\";\r\n\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\n\r\nconst TableEditForm = ({ formik }: any) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  const handleInputChange = (e: ChangeEvent, key: any) => {\r\n    const { name, value } = e.target;\r\n    dispatch(handleChange([name, value]));\r\n  };\r\n\r\n  const inputsPrintData = isOpen ? inputsPrintDataFirst : inputsPrintDataSecond;\r\n\r\n  return (\r\n    <>\r\n      {inputsPrintData.map(({ type, name }) => {\r\n        return (\r\n          <td key={name}>\r\n            <TextInput\r\n              text={\"\"}\r\n              type={type}\r\n              name={name}\r\n              value={editedReaction[name]}\r\n              onChange={handleInputChange}\r\n              classContainer={\"editForm__textInputContainer\"}\r\n              classLabel={\"editForm__textInputLabel\"}\r\n              classInput={\"editForm__textInput\"}\r\n            />\r\n\r\n            <div className=\"editForm__error\">\r\n              <small>\r\n                {validationForm()[name as keyof typeof validationForm]}\r\n              </small>\r\n            </div>\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableEditForm;\r\n","\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nexport const getTableBodyReactionsFirst = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction).slice(0, 8);\r\n  reactionValues.shift();\r\n  return reactionValues;\r\n};\r\n\r\nexport const getTableBodyReactionsSecond = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction);\r\n  const reactionValuesFiltered = [\r\n    reactionValues[0],\r\n    ...reactionValues.slice(8, 12),\r\n  ];\r\n  reactionValuesFiltered.shift();\r\n  return reactionValuesFiltered;\r\n};\r\n","export interface Props {\r\n  message: string;\r\n}\r\n\r\nconst TableBodyRequestMessage = (props:Props) => {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td>{props.message}</td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBodyRequestMessage;\r\n","\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  getTableBodyReactionsFirst,\r\n  getTableBodyReactionsSecond,\r\n} from \"./utilsTableCellsReaction\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nconst TableCellsReaction = (props: ModelReaction) => {\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const getReactions = isOpen\r\n    ? getTableBodyReactionsFirst\r\n    : getTableBodyReactionsSecond;\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {getReactions(props.reaction).map(item => {\r\n        return (\r\n          <td key={crypto.randomUUID()}>\r\n            {Array.isArray(item) ? item.flat().join(\", \") : item}\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableCellsReaction;\r\n","import { FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useDeleteReactionMutation,\r\n  useUpdateReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport {\r\n  handleUpdate,\r\n  handleEdit,\r\n} from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { MdSystemUpdateAlt } from \"react-icons/md\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nconst TableBtns = (props: ModelReaction) => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction, printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n  const [updateReaction] = useUpdateReactionMutation();\r\n  const [deleteReaction] = useDeleteReactionMutation();\r\n\r\n  const handleReactionEdit = (printReactions: any, reactionID: any) => {\r\n    dispatch(handleEdit([printReactions, reactionID]));\r\n  };\r\n\r\n  const handleReactionUpdate = async (printReactions: any, reactionID: any) => {\r\n    if (Object.keys(validationForm()).length) return;\r\n    const updatedEditedReaction = { ...editedReaction, isEdit: true };\r\n    dispatch(handleUpdate([printReactions, reactionID]));\r\n    await updateReaction(updatedEditedReaction);\r\n  };\r\n\r\n  const handleDelete = async (id?: string) => {\r\n    await deleteReaction(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <td>\r\n        {props.reaction.isEdit ? (\r\n          <button\r\n            onClick={() =>\r\n              handleReactionEdit(printReactions, props.reaction.id)\r\n            }\r\n            className=\"tableReactions__btn\"\r\n          >\r\n            <AiFillEdit />\r\n          </button>\r\n        ) : (\r\n          <button\r\n            onClick={() =>\r\n              handleReactionUpdate(printReactions, props.reaction.id)\r\n            }\r\n            className=\"tableReactions__btn\"\r\n          >\r\n            <MdSystemUpdateAlt />\r\n          </button>\r\n        )}\r\n\r\n        <button\r\n          onClick={() => handleDelete(props.reaction.id)}\r\n          className=\"tableReactions__btn tableReactions__btn--trash\"\r\n        >\r\n          <FaTrashAlt />\r\n        </button>\r\n      </td>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableBtns;\r\n","import { useEffect } from \"react\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport { useReactions } from \"../../../hooks/useReactions\";\r\nimport TableEditForm from \"../tableEditForm/TableEditForm\";\r\nimport TableCellsReaction from \"../tableCellsReaction/TableCellsReaction\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { getReactions } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport TableBtns from \"../tableBtns/TableBtns\";\r\n\r\n\r\nconst TableBody = () => {\r\n  const dispatch = useDispatch();\r\n  const { data, error, isLoading } = useReactionsQuery(undefined);\r\n\r\n  const {printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      dispatch(getReactions(data));\r\n    }\r\n  }, [data, dispatch]);\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n  if (printReactions.length === 0) {\r\n    return <TableBodyRequestMessage message={\"Brak zapisanych reakcji\"} />;\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {printReactions?.map(reaction => {\r\n        return (\r\n          <tr key={reaction.id}>\r\n            {reaction.isEdit ? (\r\n              <TableCellsReaction reaction={reaction} />\r\n            ) : (\r\n              <TableEditForm />\r\n            )}\r\n            <TableBtns reaction={reaction} />\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","export const tableHeadDataFirst = [\r\n  \"Nazwa\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Mole\",\r\n  \"Substrakt\",\r\n  \"Warunki\",\r\n  \"Rozp.\",\r\n];\r\n\r\nexport const tableHeadDataSecond = [\r\n  \"Początek\",\r\n  \"Koniec\",\r\n  \"Początek\",\r\n  \"Koniec\",\r\n];\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { tableHeadDataFirst, tableHeadDataSecond } from \"./dataTableHead\";\r\n\r\nconst TableHead = () => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {isOpen\r\n          ? tableHeadDataFirst.map(reaction => {\r\n              return <td key={reaction}>{reaction}</td>;\r\n            })\r\n          : tableHeadDataSecond.map(reaction => {\r\n              return <td key={crypto.randomUUID()}>{reaction}</td>;\r\n            })}\r\n        <td></td>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import { useDispatch } from \"react-redux\";\r\nimport TableReactions from \"../tableReactions/TableReactions\";\r\nimport TableBody from \"../tableBody/TableBody\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport { handleTableOpen } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\nconst IndexTable = () => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n  const values = editedReaction.id;\r\n\r\n  const conditionsPrint =\r\n    values &&\r\n    (validationForm().name ||\r\n      validationForm().technics ||\r\n      validationForm().alcaloids ||\r\n      validationForm().selectMilimolles ||\r\n      validationForm().substract ||\r\n      validationForm().selectReactionCondition ||\r\n      validationForm().solvents)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Warunki\" };\r\n\r\n  const timePrint =\r\n    values &&\r\n    (validationForm().startDate ||\r\n      validationForm().finishDate ||\r\n      validationForm().startTime ||\r\n      validationForm().finishTime)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Czasy\" };\r\n\r\n  return (\r\n    <main className=\"tableReactions__main\">\r\n      <section className=\"wrapper tableReactions__headers\">\r\n        <div\r\n          onClick={() => dispatch(handleTableOpen(true))}\r\n          style={{\r\n            color: conditionsPrint.color,\r\n            backgroundColor: `${\r\n              isOpen ? \"rgb(156,156,156)\" : \"rgb(255 255 255)\"\r\n            }`,\r\n          }}\r\n          className=\"tableReactions__header\"\r\n        >\r\n          {conditionsPrint.text}\r\n        </div>\r\n        <div\r\n          onClick={() => dispatch(handleTableOpen(false))}\r\n          style={{\r\n            color: timePrint.color,\r\n            backgroundColor: `${\r\n              isOpen ? \"rgb(255 255 255)\" : \"rgb(156,156,156)\"\r\n            }`,\r\n          }}\r\n          className=\"tableReactions__header\"\r\n        >\r\n          {timePrint.text}\r\n        </div>\r\n      </section>\r\n      <TableReactions>\r\n        <TableHead />\r\n        <TableBody />\r\n      </TableReactions>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexTable;\r\n"],"names":["useValidationForm","editedReaction","idx","conditions","condition","name","length","errorMessage","key","selectMilimolles","alcaloids","technics","solvents","selectReactionCondition","substract","startDate","finishDate","startTime","finishTime","validationForm","errors","undefined","flat","forEach","_ref","props","_jsx","className","children","inputsPrintDataFirst","type","inputsPrintDataSecond","formik","dispatch","useDispatch","useSelector","state","tableReactions","isOpen","toggleTable","handleInputChange","e","_e$target","target","value","handleChange","inputsPrintData","_Fragment","map","_ref2","_jsxs","TextInput","text","onChange","classContainer","classLabel","classInput","getTableBodyReactionsFirst","reaction","reactionValues","Object","values","slice","shift","getTableBodyReactionsSecond","reactionValuesFiltered","concat","_toConsumableArray","message","_useReactionsQuery","useReactionsQuery","error","getReactions","isLoading","TableBodyRequestMessage","item","Array","isArray","join","crypto","randomUUID","_useSelector","printReactions","_useUpdateReactionMut","useUpdateReactionMutation","updateReaction","_slicedToArray","_useDeleteReactionMut","useDeleteReactionMutation","deleteReaction","handleReactionUpdate","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reactionID","updatedEditedReaction","wrap","_context","prev","next","keys","abrupt","_objectSpread","isEdit","handleUpdate","stop","_x","_x2","apply","arguments","handleDelete","_callee2","id","_context2","_x3","onClick","handleEdit","handleReactionEdit","AiFillEdit","MdSystemUpdateAlt","FaTrashAlt","data","useEffect","TableCellsReaction","TableEditForm","TableBtns","tableHeadDataFirst","tableHeadDataSecond","conditionsPrint","color","timePrint","handleTableOpen","style","backgroundColor","TableReactions","TableHead","TableBody"],"sourceRoot":""}