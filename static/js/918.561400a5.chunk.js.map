{"version":3,"file":"static/js/918.561400a5.chunk.js","mappings":"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","sources":["pages/reactionForm/formReaction/dataFormReaction.tsx","hooks/useMultistepForm.tsx","components/inputs/radioInput/RadioInput.tsx","pages/reactionForm/step_1/dataStep_1.tsx","pages/reactionForm/step_1/Step_1.tsx","components/inputs/selectInut/SelectInput.tsx","pages/reactionForm/step_2/Step_2.tsx","components/inputs/checkboxInput/CheckboxInput.tsx","pages/reactionForm/step_3/dataStep_3.tsx","pages/reactionForm/step_3/Step_3.tsx","pages/reactionForm/step_4/Step_4.tsx","pages/reactionForm/step_5/dataStep_5.tsx","pages/reactionForm/step_5/Step_5.tsx","pages/reactionForm/formReaction/FormReaction.tsx"],"sourcesContent":["import { ModelFormReaction } from \"./ModelFormReaction\";\r\nexport const INITIAL_DATA: ModelFormReaction = {\r\n  name: \"\",\r\n  technics: \"\",\r\n  alcaloids: \"\",\r\n  selectMilimolles: \"--Wybierz--\",\r\n  substract: \"\",\r\n  selectReactionCondition: \"--Wybierz--\",\r\n  solvents: [],\r\n  startDate: \"\",\r\n  finishDate: \"\",\r\n  startTime: \"\",\r\n  finishTime: \"\",\r\n};\r\n","import React, { FC, useState, ReactNode } from \"react\";\r\n\r\nconst useMultistepForm = (steps: JSX.Element[]) => {\r\n  const [currentStepIdx, setCurrentStepIdx] = useState(0);\r\n\r\n  const next = () => {\r\n    setCurrentStepIdx(prev => {\r\n      if (prev >= steps.length - 1) return 1;\r\n      return prev + 1;\r\n    });\r\n  };\r\n\r\n  const back = () => {\r\n    setCurrentStepIdx(prev => {\r\n      if (prev <= 0) return 1;\r\n      return prev - 1;\r\n    });\r\n  };\r\n\r\n  const goTo = (idx: number) => {\r\n    setCurrentStepIdx(idx);\r\n  };\r\n\r\n  return {\r\n    currentStepIdx,\r\n    step: steps[currentStepIdx],\r\n    steps,\r\n    isFirstStep: currentStepIdx === 0,\r\n    isLastStep: currentStepIdx === steps.length - 1,\r\n    goTo,\r\n    next,\r\n    back,\r\n  };\r\n};\r\n\r\nexport default useMultistepForm;\r\n","import React, { FC } from \"react\";\r\n\r\n\r\ninterface ModelRadio {\r\n  value: string;\r\n  onChange: any;\r\n  checked: string;\r\n}\r\n\r\nconst RadioInput: FC<ModelRadio> = props => {\r\n  return (\r\n    <div className=\"radio__container\">\r\n      <input\r\n        type=\"radio\"\r\n        name=\"\"\r\n        value={props.value}\r\n        checked={props.value === props.checked}\r\n        onChange={props.onChange}\r\n        className=\"radio\"\r\n        id=\"id\"\r\n      />\r\n      <label htmlFor=\"id\">{props.value}</label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioInput;\r\n","export const alcaloidsData = [\"gramina\", \"kofeina\", \"nikotyna\", \"sparteina\"];\r\n","import React, { FC } from \"react\";\r\nimport RadioInput from \"../../../components/inputs/radioInput/RadioInput\";\r\nimport TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { alcaloidsData } from \"./dataStep_1\";\r\nimport { ModelStep_1 } from \"./ModelStep_1\";\r\n\r\nconst Step_1: FC<ModelStep_1> = ({ data, handleChange }): JSX.Element => {\r\n \r\n  const handleAlcaloidsChange = (e: ChangeEvent) => {\r\n    return handleChange({ alcaloids: e.target.value });\r\n  };\r\n\r\n  const handleTechnics = (e: ChangeEvent) => {\r\n    return handleChange({ technics: e.target.value });\r\n  };\r\n  const handleTextChange = (e: ChangeEvent) => {\r\n    return handleChange({ name: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TextInput\r\n        type={\"text\"}\r\n        name={\"name\"}\r\n        value={data.name}\r\n        onChange={handleTextChange}\r\n        text={\"Nazwa reakcji\"}\r\n        placeholder={\"Nazwa\"}\r\n      />\r\n\r\n      <TextInput\r\n        type={\"text\"}\r\n        name={\"technics\"}\r\n        value={data.technics}\r\n        onChange={handleTechnics}\r\n        text={\"Technika\"}\r\n        placeholder={\"Technika\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n      <p>Alkaloid</p>\r\n      {alcaloidsData.map(alcaloid => {\r\n        return (\r\n          <RadioInput\r\n            key={alcaloid}\r\n            value={alcaloid}\r\n            onChange={handleAlcaloidsChange}\r\n            checked={data.alcaloids}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_1;\r\n","import React, { useState, FC } from \"react\";\r\n\r\ninterface Props {\r\n  selectValues: number[] | string[];\r\n  label: string;\r\n  inputName: any;\r\n  value: string | number;\r\n  handleChange: any;\r\n}\r\n\r\nconst SelectInput: FC<Props> = props => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(state => !state);\r\n  };\r\n\r\n  return (\r\n    <div className=\"select__container\">\r\n      <label className=\"selec__label\">{props.label}</label>\r\n\r\n      <div className=\"select__options\">\r\n        <div onClick={handleOpen} className=\"select__top\" \r\n        style = {{border: \"1px solid black\", width:\"fix contemt\" }}>\r\n          {props.value}\r\n          <div className={open ? \"select__arrow--up\" : \"select__arrow\"}></div>\r\n        </div>\r\n\r\n        {open && (\r\n          <>\r\n            {props.selectValues.map(value => {\r\n              return (\r\n                <div\r\n                  key={value}\r\n                  onClick={() => {\r\n                    props.handleChange(value);\r\n                    handleOpen();\r\n                  }}\r\n                >\r\n                  {value}\r\n                </div>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import { FC } from \"react\";\r\nimport { ModelFormReaction } from \"../formReaction/ModelFormReaction\";\r\nimport TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport SelectInput from \"../../../components/inputs/selectInut/SelectInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\n\r\ninterface Props {\r\n  data: ModelFormReaction;\r\n  handleChange: (fields: Partial<ModelFormReaction>) => void;\r\n}\r\n\r\nconst Step_2: FC<Props> = ({ handleChange, data }): JSX.Element => {\r\n  const handleTextInputChange = (e: ChangeEvent) => {\r\n    handleChange({ substract: e.target.value });\r\n  };\r\n\r\n  const handleSelectChange = (value: string | number) => {\r\n    handleChange({ selectMilimolles: value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SelectInput\r\n        label={\"Ilość milimoli\"}\r\n        inputName={\"selectMilimolles\"}\r\n        selectValues={[1, 2, 3, 4, 5, 6]}\r\n        value={data.selectMilimolles}\r\n        handleChange={handleSelectChange}\r\n      />\r\n\r\n      <TextInput\r\n        type={\"text\"}\r\n        name={\"substract\"}\r\n        value={data.substract}\r\n        onChange={handleTextInputChange}\r\n        text={\"Substrakt\"}\r\n        placeholder={\"Substrakt\"}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_2;\r\n","import React, { FC } from \"react\";\r\n\r\nimport { modelCheckbox } from \"./modelCHeckbox\";\r\n\r\nconst CheckboxInput: FC<modelCheckbox> = props => {\r\n  return (\r\n    <div>\r\n      <label className={props.classLabel}>\r\n        <input\r\n          type=\"checkbox\"\r\n          name={props.name}\r\n          checked={props.checked}\r\n          onChange={props.onChange}\r\n          className={props.classInput}\r\n        />\r\n        <div className={props.classStyledDiv}>{props.name}</div>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckboxInput;\r\n","export const solventsData = [\r\n  { name: \"CHCL3\", key: 0 },\r\n  { name: \"CH3OH\", key: 1 },\r\n  { name: \"DMF\", key: 2 },\r\n  { name: \"DMSO\", key: 3 },\r\n  { name: \"C2H5OH\", key: 4 },\r\n];\r\n\r\n\r\nexport const INITIAL_DATA = [false, false, false, false, false]","import React, { FC, useState, useRef, useEffect } from \"react\";\r\nimport { ModelFormReaction } from \"../formReaction/ModelFormReaction\";\r\nimport CheckboxInput from \"../../../components/inputs/checkboxInput/CheckboxInput\";\r\nimport SelectInput from \"../../../components/inputs/selectInut/SelectInput\";\r\nimport { solventsData, INITIAL_DATA } from \"./dataStep_3\";\r\n\r\ninterface Props {\r\n  data: ModelFormReaction;\r\n  handleChange: (fields: Partial<ModelFormReaction>) => void;\r\n}\r\n\r\nconst Step_3: FC<Props> = ({ data, handleChange }) => {\r\n  const [isChecked, setIsChecked] = useState(INITIAL_DATA);\r\n\r\n  // Update isChecked state if data.solvents changes\r\n  useEffect(() => {\r\n    const newIsChecked = [...isChecked];\r\n    solventsData.forEach((solvent, idx) => {\r\n      newIsChecked[idx] = data.solvents.includes(solvent.name);\r\n    });\r\n    setIsChecked(newIsChecked);\r\n  }, [data.solvents]);\r\n\r\n  const handleCheckboxChange = (idx: number, name: string) => {\r\n    const newIsChecked = [...isChecked];\r\n    newIsChecked[idx] = !newIsChecked[idx];\r\n    setIsChecked(newIsChecked);\r\n\r\n    const newSolvents = newIsChecked.reduce((acc: string[], checked, idx) => {\r\n      if (checked) {\r\n        acc.push(solventsData[idx].name);\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    handleChange({ solvents: newSolvents });\r\n  };\r\n\r\n  const handleSelectChange = (value: string) => {\r\n    handleChange({ selectReactionCondition: value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Rozpuszczalnik</h3>\r\n      {solventsData.map(({ name, key }) => (\r\n        <CheckboxInput\r\n          key={key}\r\n          name={name}\r\n          checked={isChecked[key]}\r\n          onChange={() => handleCheckboxChange(key, name)}\r\n          classLabel={\"\"}\r\n          classInput={\"\"}\r\n          classStyledDiv={\"\"}\r\n        />\r\n      ))}\r\n\r\n      <SelectInput\r\n        label={\"Warunki reakcji\"}\r\n        inputName={\"selectReactionCondition\"}\r\n        selectValues={[\"mieszanie\", \"ogrzewanie\", \"mikrofala\", \"chłodzenie\"]}\r\n        value={data.selectReactionCondition}\r\n        handleChange={handleSelectChange}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_3;\r\n","import React, { FC } from \"react\";\r\nimport { ModelFormReaction } from \"../formReaction/ModelFormReaction\";\r\nimport TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\n\r\ninterface Props {\r\n  data: ModelFormReaction;\r\n  handleChange: (fields: Partial<ModelFormReaction>) => void;\r\n}\r\n\r\nconst Step_4: FC<Props> = ({ data, handleChange }) => {\r\n  const handleStarthDate = (e: ChangeEvent) => {\r\n    return handleChange({ startDate: e.target.value });\r\n  };\r\n\r\n  const handleFinishDate = (e: ChangeEvent) => {\r\n    return handleChange({ finishDate: e.target.value });\r\n  };\r\n\r\n  const handleStartTime = (e: ChangeEvent) => {\r\n    return handleChange({ startTime: e.target.value });\r\n  };\r\n\r\n  const handleFinishTime = (e: ChangeEvent) => {\r\n    return handleChange({ finishTime: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TextInput\r\n        type={\"date\"}\r\n        name={\"startDate\"}\r\n        value={data.startDate}\r\n        onChange={handleStarthDate}\r\n        text={\"Data rozpoczęcia\"}\r\n        placeholder={\"\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n      <TextInput\r\n        type={\"date\"}\r\n        name={\"finishDate\"}\r\n        value={data.finishDate}\r\n        onChange={handleFinishDate}\r\n        text={\"Data ukończenia\"}\r\n        placeholder={\"\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n\r\n      <TextInput\r\n        type={\"time\"}\r\n        name={\"startTime\"}\r\n        value={data.startTime}\r\n        onChange={handleStartTime}\r\n        text={\"Godzina rozpoczęcia\"}\r\n        placeholder={\"\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n      <TextInput\r\n        type={\"time\"}\r\n        name={\"finishTime\"}\r\n        value={data.finishTime}\r\n        onChange={handleFinishTime}\r\n        text={\"Godzina zakończenia\"}\r\n        placeholder={\"\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_4;\r\n","export const summaryData = [\r\n  \"Nazwa\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Ilość milimoli\",\r\n  \"Substrakt\",\r\n  \"Warunki reakcji\",\r\n  \"Rozpuszczalniki\",\r\n  \"Data rozpoczęcia\",\r\n  \"Data zakończenia\",\r\n  \"Godzina rozpoczęcia\",\r\n  \"Godzina zakończenia\",\r\n];\r\n","import React, { FC } from \"react\";\r\nimport { ModelFormReaction } from \"../formReaction/ModelFormReaction\";\r\nimport { summaryData } from \"./dataStep_5\";\r\n\r\ninterface Props {\r\n  data: ModelFormReaction;\r\n  handleChange: (fields: Partial<ModelFormReaction>) => void;\r\n}\r\n\r\nconst Step_5: FC<Props> = ({ data }) => {\r\n  const printInputs = Object.entries(data).map(([key, value]) => ({\r\n    [key]: value,\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <div>Podsumowanie</div>\r\n      <ul>\r\n        {printInputs.map((item, idx) => {\r\n          const value = Object.values(item)[0];\r\n\r\n          return (\r\n            <li key={crypto.randomUUID()}>\r\n              {summaryData[idx]}:&nbsp;\r\n              {Array.isArray(value) ? value.flat().join(\", \") : value}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_5;\r\n","import React, { useState } from \"react\";\r\nimport { FormEvent } from \"react\";\r\nimport {useGetReactionsQuery, useAddReactionMutation } from \"../../../services/apiSlice\";\r\nimport { ModelFormReaction } from \"./ModelFormReaction\";\r\nimport { INITIAL_DATA } from \"./dataFormReaction\";\r\nimport useMultistepForm from \"../../../hooks/useMultistepForm\";\r\nimport Step_1 from \"../step_1/Step_1\";\r\nimport Step_2 from \"../step_2/Step_2\";\r\nimport Step_3 from \"../step_3/Step_3\";\r\nimport Step_4 from \"../step_4/Step_4\";\r\nimport Step_5 from \"../step_5/Step_5\";\r\n\r\nconst FormReaction = () => {\r\n  const [reactionValues, setReactionValues] = useState(INITIAL_DATA);\r\n\r\n  const handleChange = (fields: Partial<ModelFormReaction>) => {\r\n    setReactionValues(prev => {\r\n      return { ...prev, ...fields };\r\n    });\r\n  };\r\n\r\n  const { steps, currentStepIdx, step, isFirstStep, isLastStep, back, next } =\r\n    useMultistepForm([\r\n      <Step_1 data={reactionValues} handleChange={handleChange} />,\r\n      <Step_2 data={reactionValues} handleChange={handleChange} />,\r\n      <Step_3 data={reactionValues} handleChange={handleChange} />,\r\n      <Step_4 data={reactionValues} handleChange={handleChange} />,\r\n      <Step_5 data={reactionValues} handleChange={handleChange} />,\r\n    ]);\r\n\r\n  console.log(\"data\", reactionValues);\r\n  const { data, error, isLoading, refetch } = useGetReactionsQuery(undefined);\r\n  const [addReaction] = useAddReactionMutation();\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    isLastStep ? await addReaction(reactionValues) : next();\r\n  };\r\n\r\n    if (isLoading) return <div>Loading...</div>;\r\n\r\n    if (error) return <div>{`Error: ${error}`}</div>;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={{ marginTop: 150 }}>\r\n      <p>\r\n        {currentStepIdx + 1}/{steps.length}\r\n      </p>\r\n      <>{step}</>\r\n\r\n      <div className=\"btns\">\r\n        {!isFirstStep && (\r\n          <button type=\"button\" onClick={back}>\r\n            Wróć\r\n          </button>\r\n        )}\r\n        <button type=\"submit\"> {isLastStep ? \"Wyślij\" : \"Dalej\"}</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormReaction;\r\n"],"names":["INITIAL_DATA","name","technics","alcaloids","selectMilimolles","substract","selectReactionCondition","solvents","startDate","finishDate","startTime","finishTime","steps","_useState","useState","_useState2","_slicedToArray","currentStepIdx","setCurrentStepIdx","step","isFirstStep","isLastStep","length","goTo","idx","next","prev","back","props","_jsxs","className","children","_jsx","type","value","checked","onChange","id","htmlFor","alcaloidsData","_ref","data","handleChange","handleAlcaloidsChange","e","target","_Fragment","TextInput","text","placeholder","classLabel","classInput","map","alcaloid","RadioInput","open","setOpen","handleOpen","state","label","onClick","style","border","width","selectValues","SelectInput","inputName","classStyledDiv","solventsData","key","isChecked","setIsChecked","useEffect","newIsChecked","_toConsumableArray","forEach","solvent","includes","_ref2","CheckboxInput","newSolvents","reduce","acc","push","handleCheckboxChange","summaryData","printInputs","Object","entries","_ref3","_defineProperty","item","values","Array","isArray","flat","join","crypto","randomUUID","reactionValues","setReactionValues","fields","_objectSpread","_useMultistepForm","useMultistepForm","Step_1","Step_2","Step_3","Step_4","Step_5","console","log","_useGetReactionsQuery","useGetReactionsQuery","undefined","error","isLoading","_useAddReactionMutati","refetch","useAddReactionMutation","addReaction","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","preventDefault","stop","_x","apply","arguments","concat","onSubmit","marginTop"],"sourceRoot":""}