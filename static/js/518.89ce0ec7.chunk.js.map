{"version":3,"file":"static/js/518.89ce0ec7.chunk.js","mappings":"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","sources":["hooks/useValidationForm.tsx","pages/tableReactions/requestMesageTableBody/TableBodyRequestMessage.tsx","pages/tableReactions/tableBtns/TableBtns.tsx","pages/tableReactions/tableEditForm/dataTableEditForm.tsx","pages/tableReactions/tableCellsReaction/utilsTableCellsReaction.tsx","pages/tableReactions/tableCellsReaction/TableCellsReaction.tsx","pages/tableReactions/tableEditForm/TableEditForm.tsx","pages/tableReactions/tableBody/TableBody.tsx","pages/tableReactions/tableHead/dataTableHead.tsx","pages/tableReactions/tableHead/TableHead.tsx","pages/tableReactions/tableHeader/TableHeader.tsx","pages/tableReactions/tableReactions/TableReactions.tsx","pages/tableReactions/_indexTableReactions/IndexTable.tsx"],"sourcesContent":["import { ModelReaction } from \"../services/apiSlice\";\r\n\r\nexport interface ModelValidationErrors {\r\n  [key: string]: any;\r\n  name?: string;\r\n  technics?: string;\r\n  alcaloids?: string;\r\n  selectMilimolles?: string;\r\n  atmosphere?: string;\r\n  solvent?: string;\r\n  selectReactionCondition?: string;\r\n  startDate?: string;\r\n  finishDate?: string;\r\n  startTime?: string;\r\n  finishTime?: string;\r\n}\r\n\r\nexport const useValidationForm = (\r\n  validateReaction: ModelReaction,\r\n  idx?: number\r\n) => {\r\n  const conditions = [\r\n    [\r\n      {\r\n        condition: validateReaction?.name.trim().length < 6,\r\n        errorMessage: \"Min. 6 znaków\",\r\n        key: \"name\",\r\n      },\r\n      {\r\n        condition: validateReaction?.name.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"name\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          isNaN(+validateReaction.selectMilimolles) ||\r\n          +validateReaction.selectMilimolles < 1 ||\r\n          +validateReaction.selectMilimolles > 6,\r\n        errorMessage: \"Cyfra: 1-6\",\r\n        key: \"selectMilimolles\",\r\n      },\r\n      {\r\n        condition:\r\n          validateReaction.alcaloids.trim().toUpperCase() !== \"GRAMINA\" &&\r\n          validateReaction.alcaloids.trim().toUpperCase() !== \"KOFEINA\" &&\r\n          validateReaction.alcaloids.trim().toUpperCase() !== \"NIKOTYNA\",\r\n        errorMessage: \"Alkaloid z listy\",\r\n        key: \"alcaloids\",\r\n      },\r\n\r\n      {\r\n        condition: validateReaction.technics.trim().length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"technics\",\r\n      },\r\n      {\r\n        condition: validateReaction.technics.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"technics\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition:\r\n          !validateReaction.atmosphere\r\n            ?.trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"PROTYCZNA\") &&\r\n          !validateReaction.atmosphere\r\n            ?.trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"APROTYCZNA\") &&\r\n          !validateReaction.atmosphere\r\n            ?.trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"POLARNA\"),\r\n        errorMessage: \"1 atmosfera z listy\",\r\n        key: \"atmosphere\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          validateReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIESZANIE\" &&\r\n          validateReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"OGRZEWANIE\" &&\r\n          validateReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIKROFALA\" &&\r\n          validateReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"CHŁODZENIE\",\r\n        errorMessage: \"Warunki z listy\",\r\n        key: \"selectReactionCondition\",\r\n      },\r\n      {\r\n        condition:\r\n          validateReaction.solvent?.trim().toUpperCase() !== \"CHCL3\" &&\r\n          validateReaction.solvent?.trim().toUpperCase() !== \"C2H5OH\" &&\r\n          validateReaction.solvent?.trim().toUpperCase() !== \"C6H5CH3\",\r\n        errorMessage: \"Roztwór z listy\",\r\n        key: \"solvent\",\r\n      },\r\n    \r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !validateReaction.startDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startDate\",\r\n      },\r\n      {\r\n        condition: !validateReaction.finishDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition:\r\n          new Date(validateReaction.startDate) >\r\n          new Date(validateReaction.finishDate),\r\n        errorMessage: \"Data po otwarciu\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition: !validateReaction.startTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startTime\",\r\n      },\r\n      {\r\n        condition: !validateReaction.finishTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishTime\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const validationForm = () => {\r\n    let _errors: ModelValidationErrors = {};\r\n\r\n    const conditionSet =\r\n      idx === undefined ? conditions.flat() : conditions[idx];\r\n\r\n    conditionSet.forEach(({ condition, errorMessage, key }) => {\r\n      if (condition) {\r\n        _errors[key] = errorMessage;\r\n      }\r\n    });\r\n\r\n    return _errors;\r\n  };\r\n\r\n  return { validationForm };\r\n};\r\n","export interface Props {\r\n  message: string;\r\n}\r\n\r\nconst TableBodyRequestMessage = (props:Props) => {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td style={{ margin: \"0px auto\", width:\"fit-content\"}}>{props.message}</td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBodyRequestMessage;\r\n","import { useEffect } from \"react\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { MdSystemUpdateAlt } from \"react-icons/md\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  handleCleanEditForm,\r\n  handleEdit,\r\n  handleRequestStateId,\r\n  handleHttpRequest,\r\n  handleUpdate,\r\n} from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport {\r\n  ModelReaction,\r\n  useDeleteReactionMutation,\r\n  useUpdateReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst TableBtns = (props: Partial<ModelReaction>) => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction, printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const [updateReaction, success] = useUpdateReactionMutation();\r\n  const [deleteReaction, isLoading] = useDeleteReactionMutation();\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      handleHttpRequest({\r\n        editIsLoading: success.isLoading,\r\n        editIsError: success.isError,\r\n        deleteIsLoading: isLoading.isLoading,\r\n        deleteIsError: isLoading.isError,\r\n      })\r\n    );\r\n  }, [\r\n    success.isLoading,\r\n    success.isError,\r\n    isLoading.isLoading,\r\n    isLoading.isError,\r\n    dispatch,\r\n  ]);\r\n\r\n  const handleEditReaction = (\r\n    printReactions: ModelReaction[],\r\n    reactionId: string\r\n  ) => {\r\n    dispatch(\r\n      handleEdit({ printReactions: printReactions, reactionId: reactionId })\r\n    );\r\n    dispatch(handleRequestStateId(reactionId));\r\n  };\r\n\r\n  const handleUpdateReaction = async ( ) => {\r\n    if (Object.keys(validationForm()).length) return;\r\n    dispatch(handleUpdate());\r\n    dispatch(handleCleanEditForm());\r\n    const updatedEditedReaction = { ...editedReaction, isEdit: false };\r\n\r\n    await updateReaction(updatedEditedReaction);\r\n  };\r\n\r\n  const handleDeleteReaction = async (id: string) => {\r\n    dispatch(handleRequestStateId(id));\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć reakcję?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      cancelButtonColor: \"rgb(238, 28, 24)\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n      customClass: {\r\n        title: \"tableReactions__alertTitle\",\r\n        confirmButton: \"tableReactions__alertConfirmButton\",\r\n        cancelButton: \"tableReactions__alertCancelButton\",\r\n      },\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        await deleteReaction(id);\r\n        dispatch(handleCleanEditForm());\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <td>\r\n      {!props.reaction.isEdit ? (\r\n        <button\r\n          onClick={() => handleEditReaction(printReactions, props.reaction.id)}\r\n          className=\"tableReactions__btn tableReactions__btn--edit\"\r\n        >\r\n          <AiFillEdit />\r\n        </button>\r\n      ) : (\r\n        <button\r\n          onClick={() =>\r\n            handleUpdateReaction()\r\n          }\r\n          className=\"tableReactions__btn tableReactions__btn--edit\"\r\n        >\r\n          <MdSystemUpdateAlt />\r\n        </button>\r\n      )}\r\n\r\n      <button\r\n        onClick={() => handleDeleteReaction(props.reaction.id)}\r\n        className=\"tableReactions__btn tableReactions__btn--trash\"\r\n      >\r\n        <FaTrashAlt />\r\n      </button>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default TableBtns;\r\n","export const inputsPrintDataFirst = [\r\n  { name: \"name\", type: \"text\" },\r\n  { name: \"solvent\", type: \"text\" },\r\n  { name: \"technics\", type: \"text\" },\r\n  { name: \"alcaloids\", type: \"text\" },\r\n  { name: \"selectMilimolles\", type: \"text\" },\r\n  { name: \"selectReactionCondition\", type: \"text\" },\r\n  { name: \"atmosphere\", type: \"text\" },\r\n];\r\n\r\nexport const inputsPrintDataSecond = [\r\n  { name: \"startDate\", type: \"date\" },\r\n  { name: \"finishDate\", type: \"date\" },\r\n  { name: \"startTime\", type: \"time\" },\r\n  { name: \"finishTime\", type: \"time\" },\r\n];\r\n\r\nexport const thValuesFirst = [\r\n  \"Nazwa: \",\r\n  \"Roztówr: \",\r\n  \"Technika: \",\r\n  \"Alkaloid: \",\r\n  \"Mole: \",\r\n  \"Warunki: \",\r\n  \"Atmosfera: \",\r\n];\r\nexport const thValuesSecond = [\"Otwarcie\", \"Zamknięcie\", \"Początek\", \"Koniec\"];\r\n","\r\nimport { ModelReaction } from \"../../../services/apiSlice\";\r\n\r\nexport const getTableBodyReactionsFirst = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction).slice(0, 8);\r\n  reactionValues.shift();\r\n  return reactionValues;\r\n};\r\n\r\n\r\nexport const getTableBodyReactionsSecond = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction);\r\n  const reactionValuesFiltered = [\r\n    reactionValues[0],\r\n    ...reactionValues.slice(8, 12),\r\n  ];\r\n  reactionValuesFiltered.shift();\r\n  return reactionValuesFiltered;\r\n};\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { ModelReaction } from \"../../../services/apiSlice\";\r\nimport { solventIdx } from \"../../../utils/solventIdx\";\r\nimport { thValuesFirst, thValuesSecond } from \"../tableEditForm/dataTableEditForm\";\r\nimport {\r\n  getTableBodyReactionsFirst,\r\n  getTableBodyReactionsSecond,\r\n} from \"./utilsTableCellsReaction\";\r\n\r\nconst TableCellsReaction = (props: Partial<ModelReaction>) => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const getReactions = isOpen\r\n    ? getTableBodyReactionsFirst\r\n    : getTableBodyReactionsSecond;\r\n\r\n  const getThValues = isOpen ? thValuesFirst : thValuesSecond\r\n\r\n  return (\r\n    <>\r\n      {getReactions(props.reaction).map((reaction, idx) => {\r\n        let result;\r\n        if (isOpen && idx === 1) {\r\n          result = solventIdx(reaction);\r\n        } else if (isOpen && idx === 6) {\r\n          result = Array.isArray(reaction) ? reaction.join(\", \") : reaction;\r\n        } else {\r\n          result = reaction;\r\n        }\r\n\r\n        return <td data-cell = {`${getThValues[idx]}`} key={crypto.randomUUID()}>{result}</td>;\r\n\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableCellsReaction;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { handleChange } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { solventIdx } from \"../../../utils/solventIdx\";\r\nimport {\r\n  thValuesFirst,\r\n  thValuesSecond,\r\n} from \"../tableEditForm/dataTableEditForm\";\r\nimport {\r\n  inputsPrintDataFirst,\r\n  inputsPrintDataSecond,\r\n} from \"./dataTableEditForm\";\r\n\r\nconst TableEditForm = () => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  const handleInputChange = (e: ChangeEvent) => {\r\n    const { name, value } = e.target;\r\n    dispatch(handleChange({ name: name, value: value }));\r\n  };\r\n\r\n\r\n\r\n\r\n  const inputsPrintData = isOpen ? inputsPrintDataFirst : inputsPrintDataSecond;\r\n\r\n  const getThValues = isOpen ? thValuesFirst : thValuesSecond;\r\n\r\n  return (\r\n    <>\r\n      {inputsPrintData.map(({ type, name }, idx) => {\r\n        return (\r\n          <td\r\n            data-cell={`${getThValues[idx]}`}\r\n            style={{ position: \"relative\" }}\r\n            key={name}\r\n            className={`${\r\n              (name === \"solvent\" && \"editForm__solventCellDisplay\") ||\r\n              (name === \"finishDate\" && \"editForm__solventCellDisplay\")\r\n            }`}\r\n          >\r\n            <div className=\"editForm__inputWrapper\">\r\n              <TextInput\r\n                label={\"\"}\r\n                type={type}\r\n                name={name}\r\n                value={\r\n                  Array.isArray(editedReaction[name])\r\n                    ? editedReaction[name].join(\", \")\r\n                    : editedReaction[name]\r\n                }\r\n                handleChange={handleInputChange}\r\n              \r\n                containerClass={\"editForm__textInputContainer\"}\r\n                labelClass={\"editForm__textInputLabel\"}\r\n                inputClass={\"editForm__textInput\" }\r\n              />\r\n\r\n          \r\n              <div className=\"editForm__error\">\r\n                {validationForm()[name as keyof typeof validationForm]}\r\n              </div>\r\n            </div>\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableEditForm;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { getReactions } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport TableBtns from \"../tableBtns/TableBtns\";\r\nimport TableCellsReaction from \"../tableCellsReaction/TableCellsReaction\";\r\nimport TableEditForm from \"../tableEditForm/TableEditForm\";\r\n\r\nconst TableBody = () => {\r\n  const dispatch = useDispatch();\r\n  const { data, error } = useReactionsQuery(undefined);\r\n\r\n  const { printReactions, requestState } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getReactions(data));\r\n  }, [data, dispatch]);\r\n\r\n\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n\r\n  if (printReactions.length === 0) {\r\n    return <TableBodyRequestMessage message={\"Brak zapisanych reakcji\"} />;\r\n  }\r\n\r\n  const httpRequestStyle = (reactionID: string| undefined) => {\r\n    if (requestState.edit.isLoading && requestState.id === reactionID) {\r\n      return \"httpLoadingInRow\";\r\n    }\r\n    if (requestState.edit.isError && requestState.id === reactionID) {\r\n      return \"httpErrorInRow\";\r\n    }\r\n\r\n    if (requestState.delete.isLoading && requestState.id === reactionID) {\r\n      return \"httpLoadingInRow\";\r\n    }\r\n    if (requestState.delete.isError && requestState.id === reactionID) {\r\n      return \"httpErrorInRow\";\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n\r\n  return (\r\n    <tbody>\r\n      {printReactions?.map((reaction, idx) => {\r\n        return (\r\n          <tr className={httpRequestStyle(reaction?.id)} key={reaction.id}>\r\n            <td data-cell=\"nr: \">{idx + 1}</td>\r\n            {!reaction.isEdit ? (\r\n              <TableCellsReaction reaction={reaction} />\r\n            ) : (\r\n              <TableEditForm />\r\n            )}\r\n            <TableBtns reaction={reaction} />\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","export const tableHeadDataFirst = [\r\n  \"Nazwa\",\r\n  \"Roztwór\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Mole\",\r\n  \"Warunki\",\r\n  \"Atmosfera\",\r\n];\r\n\r\nexport const tableHeadDataSecond = [\r\n  \"Otwarcie\",\r\n  \"Zamknięcie\",\r\n  \"Początek\",\r\n  \"Koniec\",\r\n];\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { tableHeadDataFirst, tableHeadDataSecond } from \"./dataTableHead\";\r\n\r\nconst TableHead = () => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>nr</th>\r\n        {isOpen\r\n          ? tableHeadDataFirst.map(reaction => {\r\n              return <th key={reaction}>{reaction}</th>;\r\n            })\r\n          : tableHeadDataSecond.map(reaction => {\r\n              return <th key={crypto.randomUUID()}>{reaction}</th>;\r\n            })}\r\n        <th></th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { handleTableOpen } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\n\r\nconst TableHeader = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { printReactions, editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  const conditionsPrint =\r\n    editedReaction.isEdit \r\n    &&\r\n    (validationForm().name ||\r\n      validationForm().technics ||\r\n      validationForm().alcaloids ||\r\n      validationForm().selectMilimolles ||\r\n      validationForm().solvent ||\r\n      validationForm().selectReactionCondition ||\r\n      validationForm().atmosphere)\r\n      ? { color: \"rgb(251, 0, 0)\", text: \"Uzupełnij\" }\r\n      : { color: \"rgb(0 0 0)\", text: \"Parametry\" };\r\n\r\n  const timePrint =\r\n    editedReaction.isEdit &&\r\n    (validationForm().startDate ||\r\n      validationForm().finishDate ||\r\n      validationForm().startTime ||\r\n      validationForm().finishTime)\r\n      ? { color: \"rgb(251, 0, 0)\", text: \"Uzupełnij\" }\r\n      : { color: \"rgb(0 0 0)\", text: \"Czasy\" };\r\n\r\n  return (\r\n    <section className=\"wrapper tableReactions__headers\">\r\n      <div\r\n        onClick={() => dispatch(handleTableOpen(true))}\r\n        style={{\r\n          color: conditionsPrint.color,\r\n          backgroundColor: `${\r\n            isOpen ? \"rgb(142,151,164)\" : \"rgb(255 255 255)\"\r\n          }`,\r\n        }}\r\n        className=\"tableReactions__header\"\r\n      >\r\n        {conditionsPrint.text}\r\n      </div>\r\n      <div\r\n        onClick={() => dispatch(handleTableOpen(false))}\r\n        style={{\r\n          color: timePrint.color,\r\n          backgroundColor: `${\r\n            isOpen ? \"rgb(255 255 255)\" : \"rgb(142,151,164)\"\r\n          }`,\r\n        }}\r\n        className=\"tableReactions__header\"\r\n      >\r\n        {timePrint.text}\r\n      </div>\r\n      <div className=\"tableReactions__header  tableReactions__header--counter \">\r\n        {printReactions.length > 0\r\n          ? `Liczba reakcji: ${printReactions.length}`\r\n          : \"\"}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TableHeader;\r\n","import { ReactNode } from \"react\";\r\n\r\nexport interface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nconst TableReactions = (props: Props) => {\r\n  return <table className=\"wrapper tableReactions__table\">{props.children}</table>;\r\n};\r\n\r\nexport default TableReactions;\r\n","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../../data/firebaseConfig\";\r\nimport TableBody from \"../tableBody/TableBody\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport TableHeader from \"../tableHeader/TableHeader\";\r\nimport TableReactions from \"../tableReactions/TableReactions\";\r\n\r\nconst IndexTable = () => {\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(user => {\r\n      !user && navigate(\"/\");\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <main className=\"tableReactions__main\">\r\n      <TableHeader />\r\n      <TableReactions>\r\n        <TableHead />\r\n        <TableBody />\r\n      </TableReactions>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexTable;\r\n"],"names":["useValidationForm","validateReaction","idx","_validateReaction$atm","_validateReaction$atm2","_validateReaction$atm3","_validateReaction$sol","_validateReaction$sol2","_validateReaction$sol3","conditions","condition","name","trim","length","errorMessage","key","isNaN","selectMilimolles","alcaloids","toUpperCase","technics","atmosphere","toLocaleUpperCase","includes","selectReactionCondition","solvent","startDate","finishDate","Date","startTime","finishTime","validationForm","_errors","undefined","flat","forEach","_ref","props","_jsx","children","style","margin","width","message","dispatch","useDispatch","_useSelector","useSelector","state","tableReactions","editedReaction","printReactions","_useUpdateReactionMut","useUpdateReactionMutation","_useUpdateReactionMut2","_slicedToArray","updateReaction","success","_useDeleteReactionMut","useDeleteReactionMutation","_useDeleteReactionMut2","deleteReaction","isLoading","useEffect","handleHttpRequest","editIsLoading","editIsError","isError","deleteIsLoading","deleteIsError","handleUpdateReaction","_asyncToGenerator","_regeneratorRuntime","mark","_callee","updatedEditedReaction","wrap","_context","prev","next","Object","keys","abrupt","handleUpdate","handleCleanEditForm","_objectSpread","isEdit","stop","apply","arguments","handleDeleteReaction","_ref2","_callee3","id","_context3","handleRequestStateId","Swal","title","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","_ref3","_callee2","result","_context2","isConfirmed","_x2","_x","_jsxs","reaction","onClick","className","MdSystemUpdateAlt","reactionId","handleEdit","handleEditReaction","AiFillEdit","FaTrashAlt","inputsPrintDataFirst","type","inputsPrintDataSecond","thValuesFirst","thValuesSecond","getTableBodyReactionsFirst","reactionValues","values","slice","shift","getTableBodyReactionsSecond","reactionValuesFiltered","concat","_toConsumableArray","isOpen","toggleTable","getReactions","getThValues","_Fragment","map","solventIdx","Array","isArray","join","crypto","randomUUID","handleInputChange","e","_e$target","target","value","handleChange","inputsPrintData","position","TextInput","label","containerClass","labelClass","inputClass","_useReactionsQuery","useReactionsQuery","data","error","requestState","TableBodyRequestMessage","reactionID","edit","delete","TableEditForm","TableCellsReaction","TableBtns","tableHeadDataFirst","tableHeadDataSecond","conditionsPrint","color","text","timePrint","handleTableOpen","backgroundColor","navigate","useNavigate","auth","user","TableHeader","TableReactions","TableHead","TableBody"],"sourceRoot":""}