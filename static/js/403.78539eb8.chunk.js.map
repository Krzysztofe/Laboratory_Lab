{"version":3,"file":"static/js/403.78539eb8.chunk.js","mappings":"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","sources":["pages/reactionForm/formReaction/dataFormReaction.tsx","hooks/useMultistepForm.tsx","components/inputs/radioInput/RadioInput.tsx","pages/reactionForm/step_1/dataStep_1.tsx","pages/reactionForm/step_1/Step_1.tsx","components/inputs/selectInput/SelectInput.tsx","pages/reactionForm/step_2/Step_2.tsx","components/inputs/checkboxInput/CheckboxInput.tsx","pages/reactionForm/step_3/dataStep_3.tsx","pages/reactionForm/step_3/Step_3.tsx","pages/reactionForm/step_4/Step_4.tsx","pages/reactionForm/step_5/dataStep_5.tsx","pages/reactionForm/step_5/Step_5.tsx","pages/reactionForm/formReaction/FormReaction.tsx","pages/tableReactions/tableEditForm/useValidationEditForm.tsx"],"sourcesContent":["import { ModelFormReaction } from \"./ModelFormReaction\";\r\nexport const INITIAL_DATA: ModelFormReaction = {\r\n  name: \"\",\r\n  technics: \"\",\r\n  alcaloids: \"\",\r\n  selectMilimolles: \"--Wybierz--\",\r\n  substract: \"\",\r\n  solvents: [],\r\n  selectReactionCondition: \"--Wybierz--\",\r\n  startDate: \"\",\r\n  finishDate: \"\",\r\n  startTime: \"\",\r\n  finishTime: \"\",\r\n  isEdit: true\r\n};\r\n","import { useState } from \"react\";\r\n\r\nconst useMultistepForm = (steps: JSX.Element[]) => {\r\n  const [currentStepIdx, setCurrentStepIdx] = useState(0);\r\n\r\n  const next = () => {\r\n    setCurrentStepIdx(prev => {\r\n      if (prev >= steps.length - 1) return 1;\r\n      return prev + 1;\r\n    });\r\n  };\r\n\r\n  const back = () => {\r\n    setCurrentStepIdx(prev => {\r\n      if (prev <= 0) return 1;\r\n      return prev - 1;\r\n    });\r\n  };\r\n\r\n  return {\r\n    currentStepIdx,\r\n    step: steps[currentStepIdx],\r\n    steps,\r\n    isFirstStep: currentStepIdx === 0,\r\n    isLastStep: currentStepIdx === steps.length - 1,\r\n    next,\r\n    back,\r\n  };\r\n};\r\n\r\nexport default useMultistepForm;\r\n","interface Props {\r\n  value: string;\r\n  onChange: any;\r\n  checked: boolean;\r\n  handleBlur?: any;\r\n}\r\n\r\nconst RadioInput = (props:Props) => {\r\n  return (\r\n    <div className=\"radio__container\">\r\n      <input\r\n        type=\"radio\"\r\n        name=\"\"\r\n        value={props.value}\r\n        checked={props.checked}\r\n        onChange={props.onChange}\r\n        onBlur={props.handleBlur}\r\n        className=\"radio\"\r\n        id=\"id\"\r\n      />\r\n      <label htmlFor=\"id\">{props.value}</label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioInput;\r\n","export const alcaloidsData = [\"gramina\", \"kofeina\", \"nikotyna\"];\r\n","import { FC, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport RadioInput from \"../../../components/inputs/radioInput/RadioInput\";\r\nimport TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { useAddReactionMutation } from \"../../../services/apiSlice\";\r\nimport { alcaloidsData } from \"./dataStep_1\";\r\nimport { ModelStep_1 } from \"./ModelStep_1\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { useValidationEditForm } from \"../../tableReactions/tableEditForm/useValidationEditForm\";\r\n\r\nconst Step_1: FC<ModelStep_1> = ({\r\n  reaction,\r\n  handleChange,\r\n  errors,\r\n}): JSX.Element => {\r\n  const [selectedAlcaloid, setSelectedAlcaloid] = useState(\"\");\r\n\r\n  const handleAlcaloidsChange = (e: ChangeEvent) => {\r\n    return handleChange({ alcaloids: e.target.value });\r\n  };\r\n\r\n  const handleTechnics = (e: ChangeEvent) => {\r\n    return handleChange({ technics: e.target.value });\r\n  };\r\n  const handleTextChange = (e: ChangeEvent) => {\r\n    return handleChange({ name: e.target.value });\r\n  };\r\n\r\n  const { validationEditForm } = useValidationEditForm(reaction);\r\n\r\n  return (\r\n    <>\r\n      <TextInput\r\n        type={\"text\"}\r\n        name={\"name\"}\r\n        value={reaction.name}\r\n        onChange={handleTextChange}\r\n        text={\"Nazwa reakcji\"}\r\n        placeholder={\"Nazwa\"}\r\n      />\r\n      <small>{errors.name}</small>\r\n   \r\n      <TextInput\r\n        type={\"text\"}\r\n        name={\"technics\"}\r\n        value={reaction.technics}\r\n        onChange={handleTechnics}\r\n        text={\"Technika\"}\r\n        placeholder={\"Technika\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n      <small>{errors.technics}</small>\r\n\r\n      <p>Alkaloid</p>\r\n      {alcaloidsData.map(alcaloid => {\r\n        return (\r\n          <RadioInput\r\n            key={alcaloid}\r\n            value={alcaloid}\r\n            onChange={handleAlcaloidsChange}\r\n            checked={reaction.alcaloids === alcaloid}\r\n          />\r\n        );\r\n      })}\r\n      <small>{errors.alcaloids}</small>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_1;\r\n","import { useState } from \"react\";\r\n\r\ninterface Props {\r\n  selectValues: number[] | string[];\r\n  label: string;\r\n  inputName: any;\r\n  value: string | number;\r\n  handleChange: any;\r\n  handleBlur?: any;\r\n}\r\n\r\nconst SelectInput = (props:Props) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(state => !state);\r\n  };\r\n\r\n  return (\r\n    <div className=\"select__container\">\r\n      <label className=\"selec__label\">{props.label}</label>\r\n\r\n      <div className=\"select__options\">\r\n        <div\r\n          onBlur={props.handleBlur}\r\n          onClick={handleOpen}\r\n          className=\"select__top\"\r\n          style={{ border: \"1px solid black\", width: \"fix contemt\" }}\r\n        >\r\n          {props.value}\r\n          <div className={open ? \"select__arrow--up\" : \"select__arrow\"}></div>\r\n        </div>\r\n\r\n        {open && (\r\n          <>\r\n            {props.selectValues.map(value => {\r\n              return (\r\n                <div\r\n                  key={value}\r\n                  onBlur={props.handleBlur}\r\n                  onClick={() => {\r\n                    props.handleChange(value);\r\n                    handleOpen();\r\n                  }}\r\n                >\r\n                  {value}\r\n                </div>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import { FC } from \"react\";\r\nimport { ModelFormReaction } from \"../formReaction/ModelFormReaction\";\r\nimport TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport SelectInput from \"../../../components/inputs/selectInput/SelectInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\n\r\ninterface Props {\r\n  reaction: any;\r\n  handleChange: any\r\n  errors: any;\r\n  \r\n}\r\n\r\nconst Step_2: FC<Props> = ({ reaction, handleChange, errors }): JSX.Element => {\r\n  \r\n  const handleTextInputChange = (e: ChangeEvent) => {\r\n    handleChange({ substract: e.target.value });\r\n  };\r\n\r\nconst handleSelectChange = (value: string | number) => {\r\n  handleChange({ selectMilimolles: value });\r\n};\r\n  return (\r\n    <>\r\n      <SelectInput\r\n        label={\"Ilość moli substratu\"}\r\n        inputName={\"selectMilimolles\"}\r\n        selectValues={[1, 2, 3, 4, 5, 6]}\r\n        value={reaction.selectMilimolles}\r\n        handleChange={handleSelectChange}\r\n      />\r\n      <small>{errors.selectMilimolles}</small>\r\n\r\n      <TextInput\r\n        type={\"text\"}\r\n        name={\"substract\"}\r\n        value={reaction.substract}\r\n        onChange={handleTextInputChange}\r\n        text={\"Substrat\"}\r\n        placeholder={\"Substrat\"}\r\n      />\r\n      <small>{errors.substract}</small>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_2;\r\n","export interface Props {\r\n  name: string;\r\n  checked: boolean;\r\n  onChange: any;\r\n  classLabel: string;\r\n  classInput: string;\r\n  classStyledDiv: string;\r\n}\r\n\r\nconst CheckboxInput = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <label className={props.classLabel}>\r\n        <input\r\n          type=\"checkbox\"\r\n          name={props.name}\r\n          checked={props.checked}\r\n          onChange={props.onChange}\r\n          className={props.classInput}\r\n        />\r\n        <div className={props.classStyledDiv}>{props.name}</div>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckboxInput;\r\n","export const solventsNameKeyData = [\r\n  { name: \"CHCL3\", key: 0 },\r\n  { name: \"CH3OH\", key: 1 },\r\n  { name: \"DMF\", key: 2 },\r\n  { name: \"DMSO\", key: 3 },\r\n  { name: \"C2H5OH\", key: 4 },\r\n];\r\n\r\n\r\n","import React, { FC, useState, useRef, useEffect } from \"react\";\r\nimport { ModelFormReaction } from \"../formReaction/ModelFormReaction\";\r\nimport CheckboxInput from \"../../../components/inputs/checkboxInput/CheckboxInput\";\r\nimport SelectInput from \"../../../components/inputs/selectInput/SelectInput\";\r\nimport { solventsNameKeyData } from \"./dataStep_3\";\r\n\r\ninterface Props {\r\nreaction: any,\r\nerrors: any,\r\nhandleChange: any\r\n\r\n}\r\n\r\nconst Step_3: FC<Props> = ({ reaction, errors, handleChange }) => {\r\n  \r\n  const [isChecked, setIsChecked] = useState([false, false, false, false, false]);\r\n\r\n  useEffect(() => {\r\n    const newIsChecked = [...isChecked];\r\n    solventsNameKeyData.forEach((solvent, idx) => {\r\n      newIsChecked[idx] = reaction.solvents.includes(solvent.name);\r\n    });\r\n    setIsChecked(newIsChecked);\r\n  }, [reaction.solvents]);\r\n\r\n  const handleCheckboxChange = (idx: number, name: string) => {\r\n    const newIsChecked = [...isChecked];\r\n    newIsChecked[idx] = !newIsChecked[idx];\r\n    setIsChecked(newIsChecked);\r\n\r\n    const getNewSolvents = newIsChecked.reduce(\r\n      (acc: string[], checked, idx) => {\r\n        if (checked) {\r\n          acc.push(solventsNameKeyData[idx].name);\r\n        }\r\n        return acc;\r\n      },\r\n      []\r\n    );\r\n\r\n    handleChange({ solvents: getNewSolvents });\r\n  };\r\n\r\n  const handleSelectChange = (value: string) => {\r\n    handleChange({ selectReactionCondition: value });  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Rozpuszczalnik</h3>\r\n      {solventsNameKeyData.map(({ name, key }) => (\r\n        <CheckboxInput\r\n          key={key}\r\n          name={name}\r\n          checked={isChecked[key]}\r\n          onChange={() => handleCheckboxChange(key, name)}\r\n          classLabel={\"\"}\r\n          classInput={\"\"}\r\n          classStyledDiv={\"\"}\r\n        />\r\n      ))}\r\n      <small>{errors.solvents}</small>\r\n\r\n      <SelectInput\r\n        label={\"Warunki reakcji\"}\r\n        inputName={\"selectReactionCondition\"}\r\n        selectValues={[\"mieszanie\", \"ogrzewanie\", \"mikrofala\", \"chłodzenie\"]}\r\n        value={reaction.selectReactionCondition}\r\n        handleChange={handleSelectChange}\r\n      />\r\n      <small>{errors.selectReactionCondition}</small>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_3;\r\n","import { FC } from \"react\";\r\nimport TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\n\r\ninterface Props {\r\n  reaction: any;\r\n  errors: any;\r\n  handleChange: any;\r\n}\r\n\r\nconst Step_4: FC<Props> = ({ reaction, errors, handleChange }) => {\r\n  const handleStarthDate = (e: ChangeEvent) => {\r\n    return handleChange({ startDate: e.target.value });\r\n  };\r\n\r\n  const handleFinishDate = (e: ChangeEvent) => {\r\n    return handleChange({ finishDate: e.target.value });\r\n  };\r\n\r\n  const handleStartTime = (e: ChangeEvent) => {\r\n    return handleChange({ startTime: e.target.value });\r\n  };\r\n\r\n  const handleFinishTime = (e: ChangeEvent) => {\r\n    return handleChange({ finishTime: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TextInput\r\n        type={\"date\"}\r\n        name={\"startDate\"}\r\n        value={reaction.startDate}\r\n        onChange={handleStarthDate}\r\n        text={\"Data rozpoczęcia\"}\r\n        placeholder={\"\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n      <small> {errors.startDate} </small>\r\n\r\n      <TextInput\r\n        type={\"date\"}\r\n        name={\"finishDate\"}\r\n        value={reaction.finishDate}\r\n        onChange={handleFinishDate}\r\n        text={\"Data ukończenia\"}\r\n        placeholder={\"\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n      <small> {errors.finishDate} </small>\r\n\r\n      <TextInput\r\n        type={\"time\"}\r\n        name={\"startTime\"}\r\n        value={reaction.startTime}\r\n        onChange={handleStartTime}\r\n        text={\"Godzina rozpoczęcia\"}\r\n        placeholder={\"\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n      <small> {errors.startTime} </small>\r\n\r\n      <TextInput\r\n        type={\"time\"}\r\n        name={\"finishTime\"}\r\n        value={reaction.finishTime}\r\n        onChange={handleFinishTime}\r\n        text={\"Godzina zakończenia\"}\r\n        placeholder={\"\"}\r\n        classLabel={\"\"}\r\n        classInput={\"\"}\r\n      />\r\n      <small> {errors.finishTime} </small>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_4;\r\n","export const summaryTitles = [\r\n  \"Nazwa\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Ilość milimoli\",\r\n  \"Substrakt\",\r\n  \"Warunki reakcji\",\r\n  \"Rozpuszczalniki\",\r\n  \"Data rozpoczęcia\",\r\n  \"Data zakończenia\",\r\n  \"Godzina rozpoczęcia\",\r\n  \"Godzina zakończenia\",\r\n];\r\n","import { FC } from \"react\";\r\nimport { summaryTitles } from \"./dataStep_5\";\r\n\r\ninterface Props {\r\n  reaction: any;\r\n}\r\n\r\nconst Step_5: FC<Props> = ({ reaction }) => {\r\n  const getReactionValues = Object.entries(reaction).map(([key, value]) => ({\r\n    [key]: value,\r\n  }))\r\n  getReactionValues.pop();\r\n  \r\n  return (\r\n    <>\r\n      <div>Podsumowanie</div>\r\n      <ul>\r\n        {getReactionValues.map((reactionValue, idx) => {\r\n          const value = Object.values(reactionValue);\r\n\r\n          return (\r\n            <li key={crypto.randomUUID()}>\r\n              {summaryTitles[idx]}:&nbsp;\r\n              {Array.isArray(value) ? value.flat().join(\", \") : value}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Step_5;\r\n","import { useState, useEffect, FormEvent } from \"react\";\r\nimport {\r\n  useReactionsQuery,\r\n  useAddReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport { INITIAL_DATA } from \"./dataFormReaction\";\r\nimport useMultistepForm from \"../../../hooks/useMultistepForm\";\r\nimport Step_1 from \"../step_1/Step_1\";\r\nimport Step_2 from \"../step_2/Step_2\";\r\nimport Step_3 from \"../step_3/Step_3\";\r\nimport Step_4 from \"../step_4/Step_4\";\r\nimport Step_5 from \"../step_5/Step_5\";\r\nimport { useValidationEditForm } from \"../../tableReactions/tableEditForm/useValidationEditForm\";\r\nimport { ModelFormReaction } from \"./ModelFormReaction\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\n\r\nconst FormReaction = () => {\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n  const [errors, setErrors] = useState({});\r\n  const [addReaction, success] = useAddReactionMutation();\r\n  const [reaction, setReaction] = useState(INITIAL_DATA);\r\n\r\n  const handleChange = (fields: Partial<ModelFormReaction>) => {\r\n    setReaction(prev => {\r\n      return { ...prev, ...fields };\r\n    });\r\n\r\n    // setReaction({...reaction, [e.target.name]:e.target.value})\r\n  };\r\n\r\n  console.log(\"\", reaction);\r\n\r\n  const { steps, currentStepIdx, step, isFirstStep, isLastStep, back, next } =\r\n    useMultistepForm([\r\n      <Step_1\r\n        reaction={reaction}\r\n        handleChange={handleChange}\r\n        errors={errors}\r\n      />,\r\n      <Step_2\r\n        reaction={reaction}\r\n        handleChange={handleChange}\r\n        errors={errors}\r\n      />,\r\n      <Step_3\r\n        reaction={reaction}\r\n        handleChange={handleChange}\r\n        errors={errors}\r\n      />,\r\n      <Step_4\r\n        reaction={reaction}\r\n        handleChange={handleChange}\r\n        errors={errors}\r\n      />,\r\n      <Step_5 reaction={reaction} />,\r\n    ]);\r\n\r\n  const idx = currentStepIdx === 4 ? undefined : currentStepIdx;\r\n\r\n  const { validationEditForm } = useValidationEditForm(reaction, idx);\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    setErrors(validationEditForm());\r\n    if (Object.keys(validationEditForm()).length) return;\r\n    isLastStep ? await addReaction(reaction) : next();\r\n  };\r\n\r\n  if (isLoading) return <div>Loading...</div>;\r\n\r\n  if (error) {\r\n    if (\"error\" in error) return <div>{error.error}</div>;\r\n  }\r\n\r\n  // if (success.data) return <p>Data sent successfully!</p>;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={{ marginTop: 150 }}>\r\n      <>\r\n        {isLoading && <p>Loading</p>}\r\n        {success.data && <p>Dane wysłane</p>}\r\n      </>\r\n      <p>\r\n        {currentStepIdx + 1}/{steps.length}\r\n      </p>\r\n      <>{success.data? 0 : step}</>\r\n\r\n      <div className=\"btns\">\r\n        {!isFirstStep && (\r\n          <button type=\"button\" onClick={back}>\r\n            Wróć\r\n          </button>\r\n        )}\r\n        <button type=\"submit\"> {isLastStep ? \"Wyślij\" : \"Dalej\"}</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormReaction;\r\n","\r\nexport interface Error {\r\n  error?: boolean;\r\n  name?: any;\r\n  technics?: any;\r\n  alcaloids?: any;\r\n  selectMilimolles?: string;\r\n  substract?: string;\r\n  solvents?: string;\r\n  selectReactionCondition?: string;\r\n  startDate?: string;\r\n  finishDate?: string;\r\n  startTime?: string;\r\n  finishTime?: string;\r\n}\r\n\r\nexport const useValidationEditForm = (editedReaction: any, idx?: any) => {\r\n  const conditions = [\r\n    [\r\n      {\r\n        condition: editedReaction.name.length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"name\",\r\n      },\r\n      {\r\n        condition: editedReaction.technics.length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"technics\",\r\n      },\r\n      {\r\n        condition: !editedReaction.alcaloids,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"alcaloids\",\r\n      },\r\n    ],\r\n    [\r\n      {\r\n        condition:\r\n          editedReaction.selectMilimolles === \"--Wybierz--\" ||\r\n          !editedReaction.selectMilimolles,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"selectMilimolles\",\r\n      },\r\n      {\r\n        condition: editedReaction.substract.length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"substract\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.solvents.length,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"solvents\",\r\n      },\r\n      {\r\n        condition: editedReaction.selectReactionCondition === \"--Wybierz--\",\r\n        errorMessage: \"Wymagane\",\r\n        key: \"selectReactionCondition\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.startDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.startTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startTime\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishTime\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const validationEditForm = () => {\r\n    const errors: any = {};\r\n\r\n    const conditionSet =\r\n      idx === undefined ? conditions.flat() : conditions[idx];\r\n\r\n    conditionSet.forEach(({ condition, errorMessage, key }) => {\r\n      if (condition) {\r\n        errors[key] = errorMessage;\r\n      }\r\n    });\r\n\r\n    return errors;\r\n  };\r\n\r\n  return { validationEditForm };\r\n};\r\n"],"names":["INITIAL_DATA","name","technics","alcaloids","selectMilimolles","substract","solvents","selectReactionCondition","startDate","finishDate","startTime","finishTime","isEdit","steps","_useState","useState","_useState2","_slicedToArray","currentStepIdx","setCurrentStepIdx","step","isFirstStep","isLastStep","length","next","prev","back","props","_jsxs","className","children","_jsx","type","value","checked","onChange","onBlur","handleBlur","id","htmlFor","alcaloidsData","_ref","reaction","handleChange","errors","handleAlcaloidsChange","e","target","useValidationEditForm","validationEditForm","_Fragment","TextInput","text","placeholder","classLabel","classInput","map","alcaloid","RadioInput","open","setOpen","handleOpen","state","label","onClick","style","border","width","selectValues","SelectInput","inputName","classStyledDiv","solventsNameKeyData","key","isChecked","setIsChecked","useEffect","newIsChecked","_toConsumableArray","forEach","solvent","idx","includes","_ref2","CheckboxInput","getNewSolvents","reduce","acc","push","handleCheckboxChange","summaryTitles","getReactionValues","Object","entries","_ref3","_defineProperty","pop","reactionValue","values","Array","isArray","flat","join","crypto","randomUUID","_useReactionsQuery","useReactionsQuery","undefined","error","isLoading","setErrors","_useAddReactionMutati","useAddReactionMutation","_useAddReactionMutati2","addReaction","success","_useState3","_useState4","setReaction","fields","_objectSpread","console","log","_useMultistepForm","useMultistepForm","Step_1","Step_2","Step_3","Step_4","Step_5","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","preventDefault","keys","abrupt","stop","_x","apply","arguments","onSubmit","marginTop","data","editedReaction","conditions","condition","errorMessage"],"sourceRoot":""}