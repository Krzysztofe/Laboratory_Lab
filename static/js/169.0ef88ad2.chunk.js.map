{"version":3,"file":"static/js/169.0ef88ad2.chunk.js","mappings":"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","sources":["hooks/useValidationForm.tsx","pages/tableReactions/tableReactions/TableReactions.tsx","pages/tableReactions/tableEditForm/dataTableEditForm.tsx","pages/tableReactions/tableEditForm/TableEditForm.tsx","pages/tableReactions/tableCellsReaction/utilsTableCellsReaction.tsx","pages/tableReactions/requestMesageTableBody/TableBodyRequestMessage.tsx","pages/tableReactions/tableCellsReaction/TableCellsReaction.tsx","pages/tableReactions/tableBtns/TableBtns.tsx","pages/tableReactions/tableBody/TableBody.tsx","pages/tableReactions/tableHead/dataTableHead.tsx","pages/tableReactions/tableHead/TableHead.tsx","pages/tableReactions/_indexTableReactions/IndexTable.tsx"],"sourcesContent":["export interface Error {\r\n  error?: boolean;\r\n  name?: any;\r\n  technics?: any;\r\n  alcaloids?: any;\r\n  selectMilimolles?: string;\r\n  substract?: string;\r\n  solvents?: string;\r\n  selectReactionCondition?: string;\r\n  startDate?: string;\r\n  finishDate?: string;\r\n  startTime?: string;\r\n  finishTime?: string;\r\n}\r\n\r\nconst toArray = (solventsValue: any) => {\r\n  if (!Array.isArray(solventsValue)) {\r\n    return [solventsValue];\r\n  }\r\n  return solventsValue;\r\n};\r\n\r\nexport const useValidationForm = (editedReaction: any, idx?: any) => {\r\n  const conditions = [\r\n    [\r\n      {\r\n        condition: editedReaction.name.trim().length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"name\",\r\n      },\r\n      {\r\n        condition: editedReaction.name.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"name\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          isNaN(+editedReaction.selectMilimolles) ||\r\n          +editedReaction.selectMilimolles < 1 ||\r\n          +editedReaction.selectMilimolles > 6,\r\n        errorMessage: \"Podaj liczbę: 1-6\",\r\n        key: \"selectMilimolles\",\r\n      },\r\n      {\r\n        condition:\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"GRAMINA\" &&\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"KOFEINA\" &&\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"NIKOTYNA\",\r\n        errorMessage: \"Podaj alkaloid\",\r\n        key: \"alcaloids\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.technics.trim().length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"technics\",\r\n      },\r\n      {\r\n        condition: editedReaction.technics.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"technics\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition:\r\n          toArray(editedReaction.solvents).filter(value =>\r\n            [\"CHCL3\", \"CH3OH\", \"DMF\", \"DMSO\", \"C2H5OH\"].includes(value)\r\n          ).length === 0,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"solvents\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIESZANIE\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"OGRZEWANIE\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIKROFALA\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"CHŁODZENIE\",\r\n        errorMessage: \"Podaj warunki\",\r\n        key: \"selectReactionCondition\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.substract.trim().length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"substract\",\r\n      },\r\n      {\r\n        condition: editedReaction.substract.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"substract\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.startDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.startTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startTime\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishTime\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const validationForm = () => {\r\n    const errors: any = {};\r\n\r\n    const conditionSet =\r\n      idx === undefined ? conditions.flat() : conditions[idx];\r\n\r\n    conditionSet.forEach(({ condition, errorMessage, key }) => {\r\n      if (condition) {\r\n        errors[key] = errorMessage;\r\n      }\r\n    });\r\n\r\n    return errors;\r\n  };\r\n\r\n  return { validationForm };\r\n};\r\n","import { ReactNode } from \"react\";\r\n\r\nexport interface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nconst TableReactions = (props: Props) => {\r\n  return <table className=\"wrapper tableReactions__table\">{props.children}</table>;\r\n};\r\n\r\nexport default TableReactions;\r\n","export const inputsPrintDataFirst = [\r\n  { name: \"name\", type: \"text\" },\r\n  { name: \"technics\", type: \"text\" },\r\n  { name: \"alcaloids\", type: \"text\" },\r\n  { name: \"selectMilimolles\", type: \"text\" },\r\n  { name: \"substract\", type: \"text\" },\r\n  { name: \"selectReactionCondition\", type: \"text\" },\r\n  { name: \"solvents\", type: \"text\" },\r\n];\r\n\r\nexport const inputsPrintDataSecond = [\r\n  { name: \"startDate\", type: \"date\" },\r\n  { name: \"finishDate\", type: \"date\" },\r\n  { name: \"startTime\", type: \"time\" },\r\n  { name: \"finishTime\", type: \"time\" },\r\n];\r\n","import TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleChange } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  inputsPrintDataFirst,\r\n  inputsPrintDataSecond,\r\n} from \"./dataTableEditForm\";\r\n\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\n\r\nconst TableEditForm = ({ formik }: any) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  const handleInputChange = (e: ChangeEvent, key: any) => {\r\n    const { name, value } = e.target;\r\n    dispatch(handleChange([name, value]));\r\n  };\r\n\r\n  const inputsPrintData = isOpen ? inputsPrintDataFirst : inputsPrintDataSecond;\r\n\r\nfunction toArray(val:any) {\r\n  if (!Array.isArray(val)) {\r\n    return [val];\r\n  }\r\n  return val;\r\n}\r\n\r\nconsole.log('edit',editedReaction)\r\n\r\n  return (\r\n    <>\r\n      {inputsPrintData.map(({ type, name }) => {\r\n        return (\r\n          <td key={name}>\r\n            <TextInput\r\n              text={\"\"}\r\n              type={type}\r\n              name={name}\r\n              value={editedReaction[name]}\r\n              onChange={handleInputChange}\r\n              classContainer={\"editForm__textInputContainer\"}\r\n              classLabel={\"editForm__textInputLabel\"}\r\n              classInput={\"editForm__textInput\"}\r\n            />\r\n\r\n            <div className=\"editForm__error\">\r\n              <small>\r\n                {validationForm()[name as keyof typeof validationForm]}\r\n              </small>\r\n            </div>\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableEditForm;\r\n","\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nexport const getTableBodyReactionsFirst = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction).slice(0, 8);\r\n  reactionValues.shift();\r\n  return reactionValues;\r\n};\r\n\r\nexport const getTableBodyReactionsSecond = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction);\r\n  const reactionValuesFiltered = [\r\n    reactionValues[0],\r\n    ...reactionValues.slice(8, 12),\r\n  ];\r\n  reactionValuesFiltered.shift();\r\n  return reactionValuesFiltered;\r\n};\r\n","export interface Props {\r\n  message: string;\r\n}\r\n\r\nconst TableBodyRequestMessage = (props:Props) => {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td style={{ margin: \"0px auto\", width:\"fit-content\"}}>{props.message}</td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBodyRequestMessage;\r\n","\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  getTableBodyReactionsFirst,\r\n  getTableBodyReactionsSecond,\r\n} from \"./utilsTableCellsReaction\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nconst TableCellsReaction = (props: ModelReaction) => {\r\n  const { error, isLoading } = useReactionsQuery(undefined);\r\n   const { printReactions } = useSelector(\r\n     (state: RootState) => state.tableReactions\r\n   );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const getReactions = isOpen\r\n    ? getTableBodyReactionsFirst\r\n    : getTableBodyReactionsSecond;\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {getReactions(props.reaction).map(item => {\r\n        return (\r\n          <td key={crypto.randomUUID()}>\r\n            {Array.isArray(item) ? item.flat().join(\", \") : item}\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableCellsReaction;\r\n","import { FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useDeleteReactionMutation,\r\n  useUpdateReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport {\r\n  handleUpdate,\r\n  handleEdit,\r\n} from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { MdSystemUpdateAlt } from \"react-icons/md\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { ModelReaction } from \"../../../hooks/useReactions\";\r\n\r\nconst TableBtns = (props: ModelReaction) => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction, printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n  const [updateReaction] = useUpdateReactionMutation();\r\n  const [deleteReaction] = useDeleteReactionMutation();\r\n\r\n  const handleReactionEdit = (printReactions: any, reactionID: any) => {\r\n    dispatch(handleEdit([printReactions, reactionID]));\r\n  };\r\n\r\n  const handleReactionUpdate = async (printReactions: any, reactionID: any) => {\r\n    if (Object.keys(validationForm()).length) return;\r\n    const updatedEditedReaction = { ...editedReaction, isEdit: true };\r\n    dispatch(handleUpdate([printReactions, reactionID]));\r\n    await updateReaction(updatedEditedReaction);\r\n  };\r\n\r\n  const handleDelete = async (id?: string) => {\r\n    await deleteReaction(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <td>\r\n        {props.reaction.isEdit ? (\r\n          <button\r\n            onClick={() =>\r\n              handleReactionEdit(printReactions, props.reaction.id)\r\n            }\r\n            className=\"tableReactions__btn tableReactions__btn--edit\"\r\n          >\r\n            <AiFillEdit />\r\n          </button>\r\n        ) : (\r\n          <button\r\n            onClick={() =>\r\n              handleReactionUpdate(printReactions, props.reaction.id)\r\n            }\r\n            className=\"tableReactions__btn tableReactions__btn--edit\"\r\n          >\r\n            <MdSystemUpdateAlt />\r\n          </button>\r\n        )}\r\n\r\n        <button\r\n          onClick={() => handleDelete(props.reaction.id)}\r\n          className=\"tableReactions__btn tableReactions__btn--trash\"\r\n        >\r\n          <FaTrashAlt />\r\n        </button>\r\n      </td>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableBtns;\r\n","import { useEffect } from \"react\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport TableEditForm from \"../tableEditForm/TableEditForm\";\r\nimport TableCellsReaction from \"../tableCellsReaction/TableCellsReaction\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport { getReactions } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport TableBtns from \"../tableBtns/TableBtns\";\r\n\r\nconst TableBody = () => {\r\n  const dispatch = useDispatch();\r\n  const { data, error, isLoading } = useReactionsQuery(undefined);\r\n\r\n  const { printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getReactions(data));\r\n  }, [data, dispatch]);\r\n\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n  if (printReactions.length === 0) {\r\n    return <TableBodyRequestMessage message={\"Brak zapisanych reakcji\"} />;\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {printReactions?.map((reaction, idx) => {\r\n        return (\r\n          <tr key={reaction.id}>\r\n            <td>{idx + 1}</td>\r\n            {reaction.isEdit ? (\r\n              <TableCellsReaction reaction={reaction} />\r\n            ) : (\r\n              <TableEditForm />\r\n            )}\r\n            <TableBtns reaction={reaction} />\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","export const tableHeadDataFirst = [\r\n  \"Nazwa\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Mole\",\r\n  \"Substrakt\",\r\n  \"Warunki\",\r\n  \"Rozp.\",\r\n];\r\n\r\nexport const tableHeadDataSecond = [\r\n  \"Otwarcie\",\r\n  \"Zamknięcie\",\r\n  \"Początek\",\r\n  \"Koniec\",\r\n];\r\n\r\n\r\n<body>\r\n<main></main>\r\n<footer>uuuuu</footer>\r\n\r\n</body>","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { tableHeadDataFirst, tableHeadDataSecond } from \"./dataTableHead\";\r\n\r\nconst TableHead = () => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <td>nr</td>\r\n        {isOpen\r\n          ? tableHeadDataFirst.map(reaction => {\r\n              return <td key={reaction}>{reaction}</td>;\r\n            })\r\n          : tableHeadDataSecond.map(reaction => {\r\n              return <td key={crypto.randomUUID()}>{reaction}</td>;\r\n            })}\r\n        <td></td>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import { useDispatch } from \"react-redux\";\r\nimport TableReactions from \"../tableReactions/TableReactions\";\r\nimport TableBody from \"../tableBody/TableBody\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport { handleTableOpen } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\nconst IndexTable = () => {\r\n  const dispatch = useDispatch();\r\n  const { printReactions, editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n  const values = editedReaction.id;\r\n\r\n  const conditionsPrint =\r\n    values &&\r\n    (validationForm().name ||\r\n      validationForm().technics ||\r\n      validationForm().alcaloids ||\r\n      validationForm().selectMilimolles ||\r\n      validationForm().substract ||\r\n      validationForm().selectReactionCondition ||\r\n      validationForm().solvents)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Parametry\" };\r\n\r\n  const timePrint =\r\n    values &&\r\n    (validationForm().startDate ||\r\n      validationForm().finishDate ||\r\n      validationForm().startTime ||\r\n      validationForm().finishTime)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Czasy\" };\r\n\r\n  return (\r\n    <main className=\"tableReactions__main\">\r\n      <section className=\"wrapper tableReactions__headers\">\r\n        <div\r\n          onClick={() => dispatch(handleTableOpen(true))}\r\n          style={{\r\n            color: conditionsPrint.color,\r\n            backgroundColor: `${\r\n              isOpen ? \"rgb(142,151,164)\" : \"rgb(255 255 255)\"\r\n            }`,\r\n          }}\r\n          className=\"tableReactions__header\"\r\n        >\r\n          {conditionsPrint.text}\r\n        </div>\r\n        <div\r\n          onClick={() => dispatch(handleTableOpen(false))}\r\n          style={{\r\n            color: timePrint.color,\r\n            backgroundColor: `${\r\n              isOpen ? \"rgb(255 255 255)\" : \"rgb(142,151,164)\"\r\n            }`,\r\n          }}\r\n          className=\"tableReactions__header\"\r\n        >\r\n          {timePrint.text}\r\n        </div>\r\n        <div className=\"tableReactions__header  tableReactions__header--counter \">\r\n          {printReactions.length>0\r\n            ? `Liczba reakcji: ${printReactions.length}`\r\n            : \"\"}\r\n        </div>\r\n      </section>\r\n\r\n      <TableReactions>\r\n         <TableHead />\r\n        <TableBody /> \r\n      </TableReactions> \r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexTable;\r\n"],"names":["useValidationForm","editedReaction","idx","solventsValue","conditions","condition","name","trim","length","errorMessage","key","isNaN","selectMilimolles","alcaloids","toUpperCase","technics","solvents","Array","isArray","filter","value","includes","selectReactionCondition","substract","startDate","finishDate","startTime","finishTime","validationForm","errors","undefined","flat","forEach","_ref","props","_jsx","className","children","inputsPrintDataFirst","type","inputsPrintDataSecond","formik","dispatch","useDispatch","useSelector","state","tableReactions","isOpen","toggleTable","handleInputChange","e","_e$target","target","handleChange","inputsPrintData","console","log","_Fragment","map","_ref2","_jsxs","TextInput","text","onChange","classContainer","classLabel","classInput","getTableBodyReactionsFirst","reaction","reactionValues","Object","values","slice","shift","getTableBodyReactionsSecond","reactionValuesFiltered","concat","_toConsumableArray","style","margin","width","message","_useReactionsQuery","useReactionsQuery","error","getReactions","isLoading","printReactions","TableBodyRequestMessage","item","join","crypto","randomUUID","_useSelector","_useUpdateReactionMut","useUpdateReactionMutation","updateReaction","_slicedToArray","_useDeleteReactionMut","useDeleteReactionMutation","deleteReaction","handleReactionUpdate","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reactionID","updatedEditedReaction","wrap","_context","prev","next","keys","abrupt","_objectSpread","isEdit","handleUpdate","stop","_x","_x2","apply","arguments","handleDelete","_callee2","id","_context2","_x3","onClick","handleEdit","handleReactionEdit","AiFillEdit","MdSystemUpdateAlt","FaTrashAlt","data","useEffect","TableCellsReaction","TableEditForm","TableBtns","tableHeadDataFirst","tableHeadDataSecond","conditionsPrint","color","timePrint","handleTableOpen","backgroundColor","TableReactions","TableHead","TableBody"],"sourceRoot":""}