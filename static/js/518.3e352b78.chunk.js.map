{"version":3,"file":"static/js/518.3e352b78.chunk.js","mappings":"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","sources":["hooks/useValidationForm.tsx","pages/tableReactions/requestMesageTableBody/TableBodyRequestMessage.tsx","pages/tableReactions/tableBtns/TableBtns.tsx","pages/tableReactions/tableCellsReaction/utilsTableCellsReaction.tsx","pages/tableReactions/tableCellsReaction/TableCellsReaction.tsx","pages/tableReactions/tableEditForm/dataTableEditForm.tsx","pages/tableReactions/tableEditForm/TableEditForm.tsx","pages/tableReactions/tableBody/TableBody.tsx","pages/tableReactions/tableHead/dataTableHead.tsx","pages/tableReactions/tableHead/TableHead.tsx","pages/tableReactions/tableHeader/TableHeader.tsx","pages/tableReactions/tableReactions/TableReactions.tsx","pages/tableReactions/_indexTableReactions/IndexTable.tsx"],"sourcesContent":["import { ModelReaction } from \"../services/apiSlice\";\r\n\r\nexport interface ModelValidationErrors {\r\n  [key: string]: any;\r\n  name?: string;\r\n  technics?: string;\r\n  alcaloids?: string;\r\n  selectMilimolles?: string;\r\n  substract?: string;\r\n  solvents?: string;\r\n  selectReactionCondition?: string;\r\n  startDate?: string;\r\n  finishDate?: string;\r\n  startTime?: string;\r\n  finishTime?: string;\r\n}\r\n\r\nconst toString = (atmosphereValue: string[] | string) => {\r\n  return Array.isArray(atmosphereValue)\r\n    ? atmosphereValue.join(\", \")\r\n    : atmosphereValue;\r\n};\r\n\r\nexport const useValidationForm = (\r\n  editedReaction: ModelReaction,\r\n  idx?: number\r\n) => {\r\n  const conditions = [\r\n    [\r\n      {\r\n        condition: editedReaction?.name.trim().length < 6,\r\n        errorMessage: \"Min. 6 znaków\",\r\n        key: \"name\",\r\n      },\r\n      {\r\n        condition: editedReaction?.name.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"name\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          isNaN(+editedReaction.selectMilimolles) ||\r\n          +editedReaction.selectMilimolles < 1 ||\r\n          +editedReaction.selectMilimolles > 6,\r\n        errorMessage: \"Podaj liczbę: 1-6\",\r\n        key: \"selectMilimolles\",\r\n      },\r\n      {\r\n        condition:\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"GRAMINA\" &&\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"KOFEINA\" &&\r\n          editedReaction.alcaloids.trim().toUpperCase() !== \"NIKOTYNA\",\r\n        errorMessage: \"Podaj alkaloid\",\r\n        key: \"alcaloids\",\r\n      },\r\n\r\n      {\r\n        condition: editedReaction.technics.trim().length < 3,\r\n        errorMessage: \"Min. 3 znaki\",\r\n        key: \"technics\",\r\n      },\r\n      {\r\n        condition: editedReaction.technics.trim().length > 10,\r\n        errorMessage: \"Max. 10 znaków\",\r\n        key: \"technics\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition:\r\n          !toString(editedReaction.atmosphere)\r\n            ?.trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"PROTYCZNE\") &&\r\n          !toString(editedReaction.atmosphere)\r\n            ?.trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"APROTYCZNE\") &&\r\n          !toString(editedReaction.atmosphere)\r\n            ?.trim()\r\n            .toLocaleUpperCase()\r\n            .includes(\"POLARNE\"),\r\n        errorMessage: \"Środowisko z listy\",\r\n        key: \"atmosphere\",\r\n      },\r\n\r\n      {\r\n        condition:\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIESZANIE\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"OGRZEWANIE\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"MIKROFALA\" &&\r\n          editedReaction.selectReactionCondition.trim().toUpperCase() !==\r\n            \"CHŁODZENIE\",\r\n        errorMessage: \"Podaj warunki\",\r\n        key: \"selectReactionCondition\",\r\n      },\r\n      {\r\n        condition:\r\n          editedReaction.solvents.trim().toUpperCase() !== \"CHCL3\" &&\r\n          editedReaction.solvents.trim().toUpperCase() !== \"C2H5OH\" &&\r\n          editedReaction.solvents.trim().toUpperCase() !== \"C6H5CH3\",\r\n        errorMessage: \"Rozp. z listy\",\r\n        key: \"solvents\",\r\n      },\r\n    ],\r\n\r\n    [\r\n      {\r\n        condition: !editedReaction.startDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishDate,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition:\r\n          new Date(editedReaction.startDate) >\r\n          new Date(editedReaction.finishDate),\r\n        errorMessage: \"Data po rozpoczęciu\",\r\n        key: \"finishDate\",\r\n      },\r\n      {\r\n        condition: !editedReaction.startTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"startTime\",\r\n      },\r\n      {\r\n        condition: !editedReaction.finishTime,\r\n        errorMessage: \"Wymagane\",\r\n        key: \"finishTime\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const validationForm = () => {\r\n    let _errors: ModelValidationErrors = {};\r\n\r\n    const conditionSet =\r\n      idx === undefined ? conditions.flat() : conditions[idx];\r\n\r\n    conditionSet.forEach(({ condition, errorMessage, key }) => {\r\n      if (condition) {\r\n        _errors[key] = errorMessage;\r\n      }\r\n    });\r\n\r\n    return _errors;\r\n  };\r\n\r\n  return { validationForm };\r\n};\r\n","export interface Props {\r\n  message: string;\r\n}\r\n\r\nconst TableBodyRequestMessage = (props:Props) => {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td style={{ margin: \"0px auto\", width:\"fit-content\"}}>{props.message}</td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBodyRequestMessage;\r\n","import { useEffect } from \"react\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { MdSystemUpdateAlt } from \"react-icons/md\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  handleCleanEditForm,\r\n  handleEdit,\r\n  handleRequestStateId,\r\n  handleHttpRequest,\r\n  handleUpdate,\r\n} from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport {\r\n  ModelReaction,\r\n  useDeleteReactionMutation,\r\n  useUpdateReactionMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst TableBtns = (props: Partial<ModelReaction>) => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction, printReactions } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const [updateReaction, success] = useUpdateReactionMutation();\r\n  const [deleteReaction, isLoading] = useDeleteReactionMutation();\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      handleHttpRequest([\r\n        success.isLoading,\r\n        success.isError,\r\n        isLoading.isLoading,\r\n        isLoading.isError,\r\n      ])\r\n    );\r\n  }, [\r\n    success.isLoading,\r\n    success.isError,\r\n    isLoading.isLoading,\r\n    isLoading.isError,\r\n    dispatch,\r\n  ]);\r\n\r\n  const handleEditReaction = (\r\n    printReactions: ModelReaction[],\r\n    reactionID: string\r\n  ) => {\r\n    dispatch(handleEdit([printReactions, reactionID]));\r\n    dispatch(handleRequestStateId(reactionID));\r\n  };\r\n\r\n  const handleUpdateReaction = async (\r\n    printReactions: ModelReaction[],\r\n    reactionID: string\r\n  ) => {\r\n    if (Object.keys(validationForm()).length) return;\r\n    const updatedEditedReaction = { ...editedReaction, isEdit: true };\r\n    dispatch(handleUpdate([printReactions, reactionID]));\r\n    dispatch(handleCleanEditForm());\r\n    await updateReaction(updatedEditedReaction);\r\n  };\r\n\r\n  const handleDeleteReaction = async (id: string) => {\r\n    dispatch(handleRequestStateId(id));\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć reakcję?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      cancelButtonColor: \"rgb(238, 28, 24)\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n      customClass: {\r\n        title: \"tableReactions__alertTitle\",\r\n        confirmButton: \"tableReactions__alertConfirmButton\",\r\n        cancelButton: \"tableReactions__alertCancelButton\",\r\n      },\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        await deleteReaction(id);\r\n        dispatch(handleCleanEditForm());\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <td>\r\n      {props.reaction.isEdit ? (\r\n        <button\r\n          onClick={() => handleEditReaction(printReactions, props.reaction.id)}\r\n          className=\"tableReactions__btn tableReactions__btn--edit\"\r\n        >\r\n          <AiFillEdit />\r\n        </button>\r\n      ) : (\r\n        <button\r\n          onClick={() =>\r\n            handleUpdateReaction(printReactions, props.reaction.id)\r\n          }\r\n          className=\"tableReactions__btn tableReactions__btn--edit\"\r\n        >\r\n          <MdSystemUpdateAlt />\r\n        </button>\r\n      )}\r\n\r\n      <button\r\n        onClick={() => handleDeleteReaction(props.reaction.id)}\r\n        className=\"tableReactions__btn tableReactions__btn--trash\"\r\n      >\r\n        <FaTrashAlt />\r\n      </button>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default TableBtns;\r\n","\r\nimport { ModelReaction } from \"../../../services/apiSlice\";\r\n\r\nexport const getTableBodyReactionsFirst = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction).slice(0, 9);\r\n  reactionValues.shift();\r\n  return reactionValues;\r\n};\r\n\r\n\r\nexport const getTableBodyReactionsSecond = (reaction: ModelReaction) => {\r\n  const reactionValues = Object.values(reaction);\r\n  const reactionValuesFiltered = [\r\n    reactionValues[0],\r\n    ...reactionValues.slice(8, 12),\r\n  ];\r\n  reactionValuesFiltered.shift();\r\n  return reactionValuesFiltered;\r\n};\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { ModelReaction } from \"../../../services/apiSlice\";\r\nimport { solventIdx } from \"../../../utils/solventIdx\";\r\nimport {\r\n  getTableBodyReactionsFirst,\r\n  getTableBodyReactionsSecond,\r\n} from \"./utilsTableCellsReaction\";\r\n\r\nconst TableCellsReaction = (props: Partial<ModelReaction>) => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const getReactions = isOpen\r\n    ? getTableBodyReactionsFirst\r\n    : getTableBodyReactionsSecond;\r\n\r\n  return (\r\n    <>\r\n      {getReactions(props.reaction).map((reaction, idx) => {\r\n        let result;\r\n        if (isOpen && idx === 1) {\r\n          result = solventIdx(reaction);\r\n        } else if (isOpen && idx === 6) {\r\n          result = Array.isArray(reaction) ? reaction.join(\", \"): reaction\r\n        } else {\r\n          result = reaction;\r\n        }\r\n\r\n        return <td key={crypto.randomUUID()}>{result}</td>;\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableCellsReaction;\r\n","export const inputsPrintDataFirst = [\r\n  { name: \"name\", type: \"text\" },\r\n  { name: \"solvents\", type: \"text\" },\r\n  { name: \"technics\", type: \"text\" },\r\n  { name: \"alcaloids\", type: \"text\" },\r\n  { name: \"selectMilimolles\", type: \"text\" },\r\n  { name: \"selectReactionCondition\", type: \"text\" },\r\n  { name: \"atmosphere\", type: \"text\" },\r\n];\r\n\r\nexport const inputsPrintDataSecond = [\r\n  { name: \"startDate\", type: \"date\" },\r\n  { name: \"finishDate\", type: \"date\" },\r\n  { name: \"startTime\", type: \"time\" },\r\n  { name: \"finishTime\", type: \"time\" },\r\n];\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport TextInput from \"../../../components/inputs/textInput/TextInput\";\r\nimport { ChangeEvent } from \"../../../data/types\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { handleChange } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport {\r\n  inputsPrintDataFirst,\r\n  inputsPrintDataSecond,\r\n} from \"./dataTableEditForm\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { solventIdx } from \"../../../utils/solventIdx\";\r\n\r\nconst TableEditForm = () => {\r\n  const dispatch = useDispatch();\r\n  const { editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  const handleInputChange = (e: ChangeEvent) => {\r\n    const { name, value } = e.target;\r\n    dispatch(handleChange([name, value]));\r\n  };\r\n\r\n  const handleKeyPress = (\r\n    e: React.KeyboardEvent<HTMLInputElement>,\r\n    inputValue: string\r\n  ) => {\r\n    if (inputValue.length > 8) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n  };\r\n  const inputsPrintData = isOpen ? inputsPrintDataFirst : inputsPrintDataSecond;\r\n\r\n  return (\r\n    <>\r\n      {inputsPrintData.map(({ type, name }) => {\r\n        return (\r\n          <td style={{ position: \"relative\" }} key={name}>\r\n            <TextInput\r\n              label={\"\"}\r\n              type={type}\r\n              name={name}\r\n              value={\r\n                Array.isArray(editedReaction[name])\r\n                  ? editedReaction[name].join(\", \")\r\n                  : editedReaction[name]\r\n              }\r\n              handleChange={handleInputChange}\r\n              handleKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) =>\r\n                name === \"solvents\" && handleKeyPress(e, editedReaction[name])\r\n              }\r\n              containerClass={\"editForm__textInputContainer\"}\r\n              labelClass={\"editForm__textInputLabel\"}\r\n              inputClass={`editForm__textInput ${\r\n                name === \"solvents\" && \"editForm__textInput--solvents\"\r\n              }`}\r\n            />\r\n\r\n            {name === \"solvents\" && (\r\n              <div className=\"editForm__printSolvents\">\r\n                {solventIdx(editedReaction[name])}\r\n              </div>\r\n            )}\r\n            <div className=\"editForm__error\">\r\n              <small>\r\n                {validationForm()[name as keyof typeof validationForm]}\r\n              </small>\r\n            </div>\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableEditForm;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { getReactions } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\nimport { useReactionsQuery } from \"../../../services/apiSlice\";\r\nimport TableBodyRequestMessage from \"../requestMesageTableBody/TableBodyRequestMessage\";\r\nimport TableBtns from \"../tableBtns/TableBtns\";\r\nimport TableCellsReaction from \"../tableCellsReaction/TableCellsReaction\";\r\nimport TableEditForm from \"../tableEditForm/TableEditForm\";\r\n\r\nconst TableBody = () => {\r\n  const dispatch = useDispatch();\r\n  const { data, error, isLoading } = useReactionsQuery(undefined);\r\n\r\n  const { printReactions, requestState } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getReactions(data));\r\n  }, [data, dispatch]);\r\n\r\n  isLoading && <TableBodyRequestMessage message={\"Loading...\"} />;\r\n\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      return <TableBodyRequestMessage message={error.error} />;\r\n  }\r\n\r\n  if (printReactions.length === 0) {\r\n    return <TableBodyRequestMessage message={\"Brak zapisanych reakcji\"} />;\r\n  }\r\n\r\n  const requestLoadingClass = (reactionID: any) => {\r\n    if (requestState.editIsLoading && requestState.id === reactionID) {\r\n      return \"httpLoadingInRow\";\r\n    }\r\n    if (requestState.editIsError && requestState.id === reactionID) {\r\n      return \"httpErrorInRow\";\r\n    }\r\n\r\n    if (requestState.deleteIsLoading && requestState.id === reactionID) {\r\n      return \"httpLoadingInRow\";\r\n    }\r\n    if (requestState.deleteIsError && requestState.id === reactionID) {\r\n      return \"httpErrorInRow\";\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n\r\n  return (\r\n    <tbody>\r\n      {printReactions?.map((reaction, idx) => {\r\n        return (\r\n          <tr\r\n            className={requestLoadingClass(reaction?.id)}\r\n            key={reaction.id}\r\n          >\r\n            <td>{idx + 1}</td>\r\n            {reaction.isEdit ? (\r\n              <>\r\n                <TableCellsReaction reaction={reaction} />\r\n              </>\r\n            ) : (\r\n              <TableEditForm />\r\n            )}\r\n            <TableBtns reaction={reaction} />\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","export const tableHeadDataFirst = [\r\n  \"Nazwa\",\r\n  \"Rozp.\",\r\n  \"Technika\",\r\n  \"Alkaloidy\",\r\n  \"Mole\",\r\n  \"Warunki\",\r\n  \"Środowisko\",\r\n];\r\n\r\nexport const tableHeadDataSecond = [\r\n  \"Otwarcie\",\r\n  \"Zamknięcie\",\r\n  \"Początek\",\r\n  \"Koniec\",\r\n];\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { tableHeadDataFirst, tableHeadDataSecond } from \"./dataTableHead\";\r\n\r\nconst TableHead = () => {\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <td>nr</td>\r\n        {isOpen\r\n          ? tableHeadDataFirst.map(reaction => {\r\n              return <td key={reaction}>{reaction}</td>;\r\n            })\r\n          : tableHeadDataSecond.map(reaction => {\r\n              return <td key={crypto.randomUUID()}>{reaction}</td>;\r\n            })}\r\n        <td></td>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { useValidationForm } from \"../../../hooks/useValidationForm\";\r\nimport { handleTableOpen } from \"../../../redux/storeFeatures/tableReactionsSlice\";\r\n\r\nconst TableHeader = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { printReactions, editedReaction } = useSelector(\r\n    (state: RootState) => state.tableReactions\r\n  );\r\n\r\n  const { isOpen } = useSelector(\r\n    (state: RootState) => state.tableReactions.toggleTable\r\n  );\r\n\r\n  const { validationForm } = useValidationForm(editedReaction);\r\n\r\n  const conditionsPrint =\r\n    !editedReaction.isEdit &&\r\n    (validationForm().name ||\r\n      validationForm().technics ||\r\n      validationForm().alcaloids ||\r\n      validationForm().selectMilimolles ||\r\n      validationForm().substract ||\r\n      validationForm().selectReactionCondition ||\r\n      validationForm().solvents)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Parametry\" };\r\n\r\n  const timePrint =\r\n    !editedReaction.isEdit &&\r\n    (validationForm().startDate ||\r\n      validationForm().finishDate ||\r\n      validationForm().startTime ||\r\n      validationForm().finishTime)\r\n      ? { color: \"red\", text: \"Uzupełnij\" }\r\n      : { color: \"black\", text: \"Czasy\" };\r\n\r\n  return (\r\n    <section className=\"wrapper tableReactions__headers\">\r\n      <div\r\n        onClick={() => dispatch(handleTableOpen(true))}\r\n        style={{\r\n          color: conditionsPrint.color,\r\n          backgroundColor: `${\r\n            isOpen ? \"rgb(142,151,164)\" : \"rgb(255 255 255)\"\r\n          }`,\r\n        }}\r\n        className=\"tableReactions__header\"\r\n      >\r\n        {conditionsPrint.text}\r\n      </div>\r\n      <div\r\n        onClick={() => dispatch(handleTableOpen(false))}\r\n        style={{\r\n          color: timePrint.color,\r\n          backgroundColor: `${\r\n            isOpen ? \"rgb(255 255 255)\" : \"rgb(142,151,164)\"\r\n          }`,\r\n        }}\r\n        className=\"tableReactions__header\"\r\n      >\r\n        {timePrint.text}\r\n      </div>\r\n      <div className=\"tableReactions__header  tableReactions__header--counter \">\r\n        {printReactions.length > 0\r\n          ? `Liczba reakcji: ${printReactions.length}`\r\n          : \"\"}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TableHeader;\r\n","import { ReactNode } from \"react\";\r\n\r\nexport interface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nconst TableReactions = (props: Props) => {\r\n  return <table className=\"wrapper tableReactions__table\">{props.children}</table>;\r\n};\r\n\r\nexport default TableReactions;\r\n","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../../data/firebaseConfig\";\r\nimport TableBody from \"../tableBody/TableBody\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport TableHeader from \"../tableHeader/TableHeader\";\r\nimport TableReactions from \"../tableReactions/TableReactions\";\r\n\r\nconst IndexTable = () => {\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(user => {\r\n      !user && navigate(\"/\");\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <main className=\"tableReactions__main\">\r\n      <TableHeader />\r\n      <TableReactions>\r\n        <TableHead />\r\n        <TableBody />\r\n      </TableReactions>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexTable;\r\n"],"names":["toString","atmosphereValue","Array","isArray","join","useValidationForm","editedReaction","idx","_toString","_toString2","_toString3","conditions","condition","name","trim","length","errorMessage","key","isNaN","selectMilimolles","alcaloids","toUpperCase","technics","atmosphere","toLocaleUpperCase","includes","selectReactionCondition","solvents","startDate","finishDate","Date","startTime","finishTime","validationForm","_errors","undefined","flat","forEach","_ref","props","_jsx","children","style","margin","width","message","dispatch","useDispatch","_useSelector","useSelector","state","tableReactions","printReactions","_useUpdateReactionMut","useUpdateReactionMutation","_useUpdateReactionMut2","_slicedToArray","updateReaction","success","_useDeleteReactionMut","useDeleteReactionMutation","_useDeleteReactionMut2","deleteReaction","isLoading","useEffect","handleHttpRequest","isError","handleUpdateReaction","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reactionID","updatedEditedReaction","wrap","_context","prev","next","Object","keys","abrupt","_objectSpread","isEdit","handleUpdate","handleCleanEditForm","stop","_x","_x2","apply","arguments","handleDeleteReaction","_ref2","_callee3","id","_context3","handleRequestStateId","Swal","title","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","_ref3","_callee2","result","_context2","isConfirmed","_x4","_x3","_jsxs","reaction","onClick","handleEdit","handleEditReaction","className","AiFillEdit","MdSystemUpdateAlt","FaTrashAlt","getTableBodyReactionsFirst","reactionValues","values","slice","shift","getTableBodyReactionsSecond","reactionValuesFiltered","concat","_toConsumableArray","isOpen","toggleTable","getReactions","_Fragment","map","solventIdx","crypto","randomUUID","inputsPrintDataFirst","type","inputsPrintDataSecond","handleInputChange","e","_e$target","target","value","handleChange","inputsPrintData","position","TextInput","label","handleKeyPress","inputValue","preventDefault","containerClass","labelClass","inputClass","_useReactionsQuery","useReactionsQuery","data","error","requestState","TableBodyRequestMessage","editIsLoading","editIsError","deleteIsLoading","deleteIsError","TableCellsReaction","TableEditForm","TableBtns","tableHeadDataFirst","tableHeadDataSecond","conditionsPrint","substract","color","text","timePrint","handleTableOpen","backgroundColor","navigate","useNavigate","auth","user","TableHeader","TableReactions","TableHead","TableBody"],"sourceRoot":""}